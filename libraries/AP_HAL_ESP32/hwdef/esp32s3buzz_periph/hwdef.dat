
# MCU class and specific type
MCU esp32 esp32_s3

define HAL_ESP32_BOARD_NAME "esp32s3buzz_periph"

# We set a specific HAL_BOARD_SUBTYPE, allowing for custom config in
# drivers. For this to be used the subtype needs to be added to
# AP_HAL/AP_HAL_Boards.h as well.
#  dont use this here, boards.py does it for us. dxefine CONFIG_HAL_BOARD_SUBTYPE HAL_BOARD_SUBTYPE_ESP32_S3BUZZ


# Now we need to specify the APJ_BOARD_ID. This is the ID that the
# bootloader presents to GCS software so it knows if this firmware is
# suitable for the board. Please see
# https://github.com/ArduPilot/Bootloader/blob/master/hw_config.h for
# a list of current board IDs. If you add a new board type then please
# get it added to that repository so we don't get conflicts.

# Note that APJ is "ArduPilot JSON Firmware Format".

# board ID for firmware load
APJ_BOARD_ID 9

# Now you need to say what crystal frequency you have for this
# board. All of the clocks are scaled against this. Typical values are
# 24000000 or 8000000.

# crystal frequency
OSCILLATOR_HZ 24000000

# setup build for a peripheral firmware
env AP_PERIPH 1

# Now the size of flash in kilobytes, for creating the ld.script.

# flash size
FLASH_SIZE_KB 2048

# Now define which UART is used for printf(). We rarely use printf()
# in ChibiOS, so this is really only for debugging very early startup
# in drivers.

# Serial port for stdout. This is optional. If you leave it out then
# output from printf() lines will go to the ArduPilot console, which is the
# first UART in the SERIAL_ORDER list.  But note that some startup code
# runs before USB is set up. 
# The value for STDOUT_SERIAL is a serial device name, and must be for a 
# serial device for which pins are defined in this file. For example, SD7
# is for UART7 (SD7 == "serial device 7" in ChibiOS).
#STDOUT_SERIAL SD7
#STDOUT_BAUDRATE 57600

# Now the USB setup, if you have USB. All of these settings are
# option, and the ones below are the defaults. It ends up creating a
# USB ID on Linux like this:
# /dev/serial/by-id/usb-ArduPilot_fmuv3_3E0031000B51353233343932-if00
# If creating a board for a RTF vehicle you may wish to customise these.

# USB setup
USB_STRING_MANUFACTURER "ArduPilot"

# Now define the order that I2C buses are presented in the hal.i2c API
# in ArduPilot. For historical reasons inherited from HAL_PX4 the
# 'external' I2C bus should be bus 1 in hal.i2c, and internal I2C bus
# should be bus 0. On fmuv3 the STM32 I2C1 is our external bus and
# I2C2 is our internal bus, so we need to setup the order as I2C2
# followed by I2C1 in order to achieve the conventional order that
# drivers expect.
# order of I2C buses
I2C_ORDER I2C1 I2C2

# Now the serial ordering. These map to the SERIALn_ parameter numbers
# If you use a shorter list then HAL_Empty::UARTDriver
# objects are substituted for later UARTs, or you can leave a gap by
# listing one or more of the uarts as EMPTY.

# The normal usage of this ordering is:
# 1) SERIAL0: console (primary mavlink, usually USB)
# 2) SERIAL1: telem1
# 3) SERIAL2: telem2
# 4) SERIAL3: primary GPS
# 5) SERIAL4: GPS2
# 6) SERIAL5: extra UART (usually RTOS debug console)

# order of UARTs (and USB)
SERIAL_ORDER OTG1 USART2 USART3 UART4 UART8 UART7

# If the board has an IOMCU connected via a UART then this defines the
# UART to talk to that MCU. Leave it out for boards with no IOMCU.

# UART for IOMCU
#IOxMCU_UART USART6

# Now we start on the pin definitions. Every pin used by ArduPilot
# needs to be in this file. The pins in this file can be defined in any order.

# The format is P+port+pin. So PC4 is portC pin4.
# For every pin the second column is the label. If this is a
# peripheral that has an alternate function defined in the STM32
# datasheet then the label must be the name of that alternative
# function. The names are looked up in the python database for this
# MCU. Please see STM32F427xx.py for the F427 database. That database
# is used to automatically fill in the alternative function (and later
# for the DMA channels).

# The third column is the peripheral type. This must be one of the
# following: UARTn, USARTn, OTGn, SPIn, I2Cn, ADCn, TIMn, SWD, SDIO,
# INPUT, OUTPUT, CS.

# The fourth and later columns are for modifiers on the pin. The
# possible modifiers are:
# pin speed: SPEED_VERYLOW, SPEED_LOW, SPEED_MEDIUM, SPEED_HIGH
# pullup: PULLUP, PULLDOWN, FLOATING
# out type: OPENDRAIN, PUSHPULL
# default value: LOW, HIGH

# Additionally, each class of pin peripheral can have extra modifiers
# suitable for that pin type. For example, for an OUTPUT you can map
# it to a GPIO number in hal.gpio using the GPIO(n) modifier. For ADC
# inputs you can apply a scaling factor (to bring it to unit volts)
# using the SCALE(x) modifier. See the examples below for more
# modifiers, or read the python code in chibios_hwdef.py.

# Now we define UART4 which is for the GPS. Be careful
# of the difference between USART and UART. Check the STM32F427xx.py
# if unsure which it is. For a UART we need to specify at least TX and
# RX pins.

# UART4 serial GPS
PA0 UART4_TX UART4
PA1 UART4_RX UART4

# Now define the primary battery connectors. The labels we choose here
# are used to create defines for pins in the various drivers, so
# choose names that match existing board setups where possible. Here
# we define two pins PA2 and PA3 for voltage and current sensing, with
# a scale factor of 1.0 and connected on ADC1. The pin number this
# maps to in hal.adc is automatically determined using the datasheet
# tables in STM32F427xx.py.

PA2 BATT_VOLTAGE_SENS ADC1 SCALE(1)
PA3 BATT_CURRENT_SENS ADC1 SCALE(1)

# Now the VDD sense pin. This is used to sense primary board voltage.
PA4 VDD_5V_SENS ADC1 SCALE(2)

# Now the first SPI bus. At minimum you need SCK, MISO and MOSI pin
definitions. You can add speed modifiers if you want them, otherwise
the defaults for the peripheral class are used.

# defaults setting snme: PE2 port E esppin 34 pinidx 2 type:INPUT extra:['FLOATING']
# shows us that esp pin: 34 is CS ( ie chipselect )
# seepms plausible, buzz...
PE2 SPI3_CS SPI3 MPU_CS
SPIDEV mpu9250        SPI3 DEVID4  MPU_CS       MODE0  2*MHZ  8*MHZ


# --------------------------------
#        #define HAL_ESP32_RCOUT { GPIO_NUM_11,GPIO_NUM_10, GPIO_NUM_9, GPIO_NUM_8, GPIO_NUM_7, GPIO_NUM_6 }
#
#        // SPI BUS setup, including gpio, dma, etc
#        // note... we use 'vspi' for the bmp280 and mpu9250
#        #define HAL_ESP32_SPI_BUSES \
#            {.host=SPI3_HOST, .dma_ch=SPI_DMA_CH_AUTO, .mosi=GPIO_NUM_36, .miso=GPIO_NUM_37, .sclk=GPIO_NUM_35}
#        // tip:  VSPI_HOST  is an alternative name for esp's SPI3
#        //#define HAL_ESP32_SPI_BUSES {}
#
#        // SPI per-device setup, including speeds, etc.
#        #define HAL_ESP32_SPI_DEVICES \
#            {.name="mpu9250", .bus=0, .device=0, .cs=GPIO_NUM_34,  .mode = 0, .lspeed=2*MHZ, .hspeed=8*MHZ}
#        //#define HAL_ESP32_SPI_DEVICES {}
#
#        //I2C bus list
#        #define HAL_ESP32_I2C_BUSES \
#            {.port=I2C_NUM_0, .sda=GPIO_NUM_16, .scl=GPIO_NUM_15, .speed=400*KHZ, .internal=true}
#        //#define HAL_ESP32_I2C_BUSES {} // using this embty block appears to cause crashes?
#
#
#        // rcin on what pin?
#        #define HAL_ESP32_RCIN GPIO_NUM_14
#
#
#        //HARDWARE UARTS
#        #define HAL_ESP32_UART_DEVICES \
#        {.port=UART_NUM_0, .rx=GPIO_NUM_44, .tx=GPIO_NUM_43 },{.port=UART_NUM_1, .rx=GPIO_NUM_17, .tx=GPIO_NUM_18 }
#  ---------------------------------------------

# this is how youd enable spi1 bus.
# PA18 SPI1_SCK SPI1
# PA19 SPI1_MISO SPI1
# PA23 SPI1_MOSI SPI1

# esp32s VSPI buss is also called SPI3 so we use that fo the only peripheral-usable spi bus on this board
#   ... so the output shows us that esp pin:
#  35 is on PE3 and is spi CLOCK
#  36 is on PE4 and is spi mosi
#  37 is on PE5 and is spi miso
# defaults setting snme: PE3 port E esppin 35 pinidx 3 type:INPUT extra:['FLOATING']
# defaults setting snme: PE4 port E esppin 36 pinidx 4 type:INPUT extra:['FLOATING']
# defaults setting snme: PE5 port E esppin 37 pinidx 5 type:INPUT extra:['FLOATING']
# defaults setting snme: PE6 port E esppin 38 pinidx 6 type:INPUT extra:['FLOATING']

PE3 SPI3_SCK SPI3
PE4 SPI3_MOSI SPI3
PE5 SPI3_MISO SPI3

# PA26 MAG_CS CS
PA5 MPU_CS CS

# This defines an output pin which will default to output LOW. It is a
# pin that enables peripheral power on this board.

# - we dont have a:  PA8 VDD_5V_PERIPH_EN OUTPUT LOW

# This is the pin that senses USB being connected. It is an input pin
# setup as OPENDRAIN.
# - we dont have a: PA9 VBUS INPUT OPENDRAIN

# This is a commented out pin for talking to the debug UART on the
# IOMCU, not used yet, but left as a comment (with a '#' in front) for
# future reference
# PA10 IO-debug-console

# Now we define the pins that USB is connected on.
# - we dont have a: PA11 OTG_FS_DM OTG1
# - we dont have a: PA12 OTG_FS_DP OTG1

# These are the pins for SWD debugging with a STlinkv2 or black-magic probe.
# - we dont have a: PA13 JTMS-SWDIO SWD
# - we dont have a: PA14 JTCK-SWCLK SWD

# This defines the PWM pin for the buzzer (if there is one). It is
# also mapped to a GPIO output so you can play with the buzzer via
# MAVLink relay commands if you want to.

# PWM output for buzzer
# - we dont have a: PA15 TIM2_CH1 TIM2 GPIO(77) ALARM

# This defines a couple of general purpose outputs, mapped to GPIO
# numbers 1 and 2 for users.
PB0 EXTERN_GPIO1 OUTPUT GPIO(1)
PB1 EXTERN_GPIO2 OUTPUT GPIO(2)

# This defines some input pins, currently unused.
PB2 BOOT1 INPUT
PB3 FMU_SW0 INPUT

# This defines the pins for the 2nd CAN interface, if available.
#PB6 CAN2_TX CAN2
#PB12 CAN2_RX CAN2

# Now the first I2C bus. The pin speeds are automatically setup
# correctly, but can be overridden here if needed.
#PB8 I2C1_SCL I2C1
#PB9 I2C1_SDA I2C1

# the 2nd I2C bus
#PB10 I2C2_SCL I2C2
#PB11 I2C2_SDA I2C2

# the 2nd SPI bus
#PB13 SPI2_SCK SPI2
#PB14 SPI2_MISO SPI2
#PB15 SPI2_MOSI SPI2

# This input pin is used to detect that power is valid on USB.
#PC0 VBUS_nVALID INPUT PULLUP

# This defines the CS pin for the magnetometer and first IMU. Note
# that CS pins are software controlled, and are not tied to a particular
# SPI bus.
#PC1 MAG_CS CS
#PC2 MPU_CS CS

# This defines more ADC inputs.
#PC3 AUX_POWER ADC1 SCALE(1)
#PC4 AUX_ADC2 ADC1 SCALE(1)

# And the analog input for airspeed (rarely used these days).
#PC5 PRESSURE_SENS ADC1 SCALE(2)

# This sets up the UART for talking to the IOMCU. Note that it is
# vital that this UART has DMA available. See the DMA settings below
# for more information.

#  USART6 to IO
#PC6 USART6_TX USART6
#PC7 USART6_RX USART6

# Now setup the pins for the microSD card, if available.
#PC8 SDIO_D0 SDIO
#PC9 SDIO_D1 SDIO
#PC10 SDIO_D2 SDIO
#PC11 SDIO_D3 SDIO
#PC12 SDIO_CK SDIO
#PD2 SDIO_CMD SDIO

# More CS pins for more sensors. The labels for all CS pins need to
# match the SPI device table later in this file.
#PC13 GYRO_EXT_CS CS
#PC14 BARO_EXT_CS CS
#PC15 ACCEL_EXT_CS CS
#PD7 BARO_CS CS
#PE4 MPU_EXT_CS CS

# the first CAN bus
#PD0 CAN1_RX CAN1
#PD1 CAN1_TX CAN1

# Another USART, this one for telem1. This one has RTS and CTS lines.
# USART2 serial2 telem1
#PD3 USART2_CTS USART2
#PD4 USART2_RTS USART2
#PD5 USART2_TX USART2
#PD6 USART2_RX USART2

# The telem2 USART, also with RTS/CTS available.
# USART3 serial3 telem2
#PD8 USART3_TX USART3
#PD9 USART3_RX USART3
#PD11 USART3_CTS USART3
#PD12 USART3_RTS USART3

# The CS pin for FRAM (ramtron). This one is marked as using
# SPEED_VERYLOW, which matches the HAL_PX4 setup.
#PD10 FRAM_CS CS SPEED_VERYLOW

# Now we start defining some PWM pins. We also map these pins to GPIO
# values, so users can set BRD_PWM_COUNT to choose how many of the PWM
# outputs on the primary MCU are setup as PWM and how many as
# GPIOs. To match HAL_PX4 we number the GPIOs for the PWM outputs
# starting at 50.
#PE14 TIM1_CH4 TIM1 PWM(1) GPIO(50)
#PE13 TIM1_CH3 TIM1 PWM(2) GPIO(51)
#PE11 TIM1_CH2 TIM1 PWM(3) GPIO(52)
#PE9  TIM1_CH1 TIM1 PWM(4) GPIO(53)
#PD13 TIM4_CH2 TIM4 PWM(5) GPIO(54)
#PD14 TIM4_CH3 TIM4 PWM(6) GPIO(55)

# This is the invensense data-ready pin. We don't use it in the
# default driver.
#PD15 MPU_DRDY INPUT

# the 2nd GPS UART
# UART8 serial4 GPS2
#PE0 UART8_RX UART8
#PE1 UART8_TX UART8

# Now setup SPI bus4.
#PE2 SPI4_SCK  SPI4
#PE5 SPI4_MISO SPI4
#PE6 SPI4_MOSI SPI4

# This is the pin to enable the sensors rail. It can be used to power
# cycle sensors to recover them in case there are problems with power on
# timing affecting sensor stability. We pull it high by default.
#PE3 VDD_3V3_SENSORS_EN OUTPUT HIGH

# UART7 maps to uartF in the HAL (serial5 in SERIALn_ parameters).
#PE7 UART7_RX UART7
#PE8 UART7_TX UART7

# Define a LED, mapping it to GPIO(0). LOW will illuminate the LED
#PE12 FMU_LED_AMBER OUTPUT HIGH OPENDRAIN GPIO(0)

# Power flag pins: these tell the MCU the status of the various power
# supplies that are available. The pin names need to exactly match the
# names used in AnalogIn.cpp. 
PB5 VDD_BRICK_nVALID INPUT PULLUP
PB7 VDD_BRICK2_nVALID INPUT PULLUP
#PE10 VDD_5V_HIPOWER_nOC INPUT PULLUP
#PE15 VDD_5V_PERIPH_nOC INPUT PULLUP

# Now the SPI device table. This table creates all accessible SPI
# devices, giving the name of the device (which is used by device
# drivers to open the device), plus which SPI bus it it on, what
# device ID will be used (which controls the IDs used in parameters
# such as COMPASS_DEV_ID, so we can detect when the list of devices
# changes between reboots for calibration purposes), the SPI mode to
# use, and the low and high speed settings for the device.

# You can define more SPI devices than you actually have, to allow for
# flexibility in board setup, and the driver code can probe to see
# which are responding.

# The DEVID values and device names are chosen to match the PX4 port
# of ArduPilot so users don't need to re-do their accel and compass
# calibrations when moving to ChibiOS.

#SPIDEV ms5611         SPI1 DEVID3  BARO_CS      MODE3 20*MHZ 20*MHZ
#SPIDEV ms5611_ext     SPI4 DEVID2  BARO_EXT_CS  MODE3 20*MHZ 20*MHZ
#SPIDEV mpu6000        SPI1 DEVID4  MPU_CS       MODE3  2*MHZ  8*MHZ
#SPIDEV icm20608-am    SPI1 DEVID2  ACCEL_EXT_CS MODE3  4*MHZ  8*MHZ

#SPIDEV mpu9250        SPI1 DEVID4  MPU_CS       MODE3  4*MHZ  8*MHZ

#SPIDEV mpu9250_ext    SPI4 DEVID1  MPU_EXT_CS   MODE3  4*MHZ  8*MHZ
#SPIDEV icm20948       SPI1 DEVID4  MPU_CS       MODE3  4*MHZ  8*MHZ
#SPIDEV icm20948_ext   SPI4 DEVID1  MPU_EXT_CS   MODE3  4*MHZ  8*MHZ
#SPIDEV hmc5843        SPI1 DEVID5  MAG_CS       MODE3 11*MHZ 11*MHZ
#SPIDEV lsm9ds0_g      SPI1 DEVID1  GYRO_EXT_CS  MODE3 11*MHZ 11*MHZ 
#SPIDEV lsm9ds0_am     SPI1 DEVID2  ACCEL_EXT_CS MODE3 11*MHZ 11*MHZ 
#SPIDEV lsm9ds0_ext_g  SPI4 DEVID4  GYRO_EXT_CS  MODE3 11*MHZ 11*MHZ 
#SPIDEV lsm9ds0_ext_am SPI4 DEVID3  ACCEL_EXT_CS MODE3 11*MHZ 11*MHZ 
#SPIDEV icm20602_ext   SPI4 DEVID4  GYRO_EXT_CS  MODE3  4*MHZ  8*MHZ
#SPIDEV ramtron        SPI2 DEVID10 FRAM_CS      MODE3  8*MHZ  8*MHZ
#SPIDEV external0m0    SPI4 DEVID5  MPU_EXT_CS   MODE0  2*MHZ  2*MHZ
#SPIDEV external0m1    SPI4 DEVID5  MPU_EXT_CS   MODE1  2*MHZ  2*MHZ
#SPIDEV external0m2    SPI4 DEVID5  MPU_EXT_CS   MODE2  2*MHZ  2*MHZ
#SPIDEV external0m3    SPI4 DEVID5  MPU_EXT_CS   MODE3  2*MHZ  2*MHZ
#SPIDEV pixartPC15     SPI4 DEVID13 ACCEL_EXT_CS MODE3  2*MHZ  2*MHZ

# Now some commented out SPI device names which can be used by
# developers to test that the clock calculations are right for a
# bus. This is used in conjunction with the mavproxy devop module.

# for SPI clock testing
#SPIDEV clock500 SPI4 DEVID5  MPU_EXT_CS   MODE0  500*KHZ 500*KHZ # gives 329KHz
#SPIDEV clock1   SPI4 DEVID5  MPU_EXT_CS   MODE0  1*MHZ 1*MHZ     # gives 657kHz
#SPIDEV clock2   SPI4 DEVID5  MPU_EXT_CS   MODE0  2*MHZ 2*MHZ     # gives 1.3MHz
#SPIDEV clock4   SPI4 DEVID5  MPU_EXT_CS   MODE0  4*MHZ 4*MHZ     # gives 2.6MHz
#SPIDEV clock8   SPI4 DEVID5  MPU_EXT_CS   MODE0  8*MHZ 8*MHZ     # gives 5.5MHz
#SPIDEV clock16  SPI4 DEVID5  MPU_EXT_CS   MODE0  16*MHZ 16*MHZ   # gives 10.6MHz

# This adds a C define which sets up the ArduPilot architecture
# define. Any line starting with 'define' is copied literally as
# a #define in the hwdef.h header.
define HAL_CHIxBIOS_ARCH_FMUV3 1

define HAL_BOARD_LOG_DIRECTORY "/SDCARD/APM/LOGS"
define HAL_BOARD_TERRAIN_DIRECTORY "/SDCARD/APM/TERRAIN"
define HAL_BOARD_STORAGE_DIRECTORY "/SDCARD/APM/STORAGE"

# do direct neopixel LED output to enable the 'rainbow' effect on
# startup
define HAL_PERIPH_NEOPIXEL_CHAN_WITHOUT_NOTIFY 0
define HAL_PERIPH_NEOPIXEL_COUNT_WITHOUT_NOTIFY 1

define HAL_INS_DEFAULT HAL_INS_MPU9250_SPI
#define HAL_BARO_DEFAULT HAL_BARO_BMP280_SPI

define HAL_BARO_ALLOW_INIT_NO_BARO 1

define HAL_PROBE_EXTERNAL_I2C_COMPASSES 0

# spi imu is a 9250
define HAL_INS_MPU9250_NAME "mpu9250"
define PROBE_IMU_SPI ADD_BACKEND(AP_InertialSensor_Invensense::probe(*this,hal.spi->get_device(HAL_INS_MPU9250_NAME), ROTATION_NONE))
define HAL_INS_PROBE_LIST PROBE_IMU_SPI

# one spi baro looks like this:
# define HAL_BARO_PROBE_LIST PROBE_BARO_SPI(BMP280, "bmp280")

# spi BARO setup
#define PE6 BARO1_CS
#SPIDEV baro  SPI3 DEVID2 BARO1_CS MODE3 1*MHZ 8*MHZ
BARO BMP280 SPI:baro
define HAL_BARO_ALLOW_INIT_NO_BARO 1
define AP_BARO_BACKEND_DEFAULT_ENABLED 0
define AP_BARO_BMP280_ENABLED 1

# one i2c BARO might be like this..
# BARO BMP280 I2C:0:0x76
# define AP_BARO_BACKEND_DEFAULT_ENABLED 0
# define AP_BARO_BMP280_ENABLED 1

define HAL_ESP32_WIFI 1

define WIFI_SSID "ardupilot123"
define WIFI_PWD "ardupilot123"

// 48 is actually for the neopixel
define HAL_USE_PWM 1
define HAL_ESP32_RCOUT { GPIO_NUM_35,GPIO_NUM_36, GPIO_NUM_37 }

define HAL_ESP32_UART_DEVICES {.port=UART_NUM_0, .rx=GPIO_NUM_6, .tx=GPIO_NUM_7 }

define HAL_USE_I2C 1
define HAL_ESP32_I2C_BUSES	{.port=I2C_NUM_0, .sda=GPIO_NUM_5, .scl=GPIO_NUM_1, .speed=400*KHZ, .internal=true}

// buzz todo derive the HAL_USE_* in esp32_hwdefpy/write_SPI_config and friends
define HAL_USE_SPI 1
define HAL_ESP32_SPI_BUSES   {.host=SPI3_HOST, .dma_ch=SPI_DMA_CH_AUTO, .mosi=GPIO_NUM_11, .miso=GPIO_NUM_13, .sclk=GPIO_NUM_12}
define HAL_ESP32_SPI_DEVICES {.name="bmp280", .bus=0, .device=0, .cs=GPIO_NUM_33,  .mode = 3, .lspeed=1*MHZ, .hspeed=1*MHZ}, {.name="mpu9250", .bus=0, .device=1, .cs=GPIO_NUM_21,  .mode = 0, .lspeed=2*MHZ, .hspeed=8*MHZ}

// the pin number, the gain/multiplier associated with it, the ardupilot name for the pin in parameter/s.
#--dxefine HAL_USE_ADC 1

// ..each is the ADC1 channel number of GPIO n.... must exist in this list... not all pins can adc:
// right now we only really support ADC1, not 2, so that too. so GPIO1-to GPIO10 seem ok, if unused elsewhere.
//https://docs.espressif.com/projects/esp-idf/en/release-v4.4/esp32s3/api-reference/peripherals/adc.html#adc-api-reference-gpio-lookup-macros
// {the pin number, the gain/multiplier associated with it, the ardupilot name for the pin in parameter/s}
define HAL_ESP32_ADC_PINS {{ADC1_GPIO4_CHANNEL, 11, 1},{ADC1_GPIO8_CHANNEL, 11, 2},{ADC1_GPIO9_CHANNEL, 11, 3},{ADC1_GPIO10_CHANNEL, 11, 4}}

define HAL_ESP32_RCIN GPIO_NUM_34

define HAVE_FILESYSTEM_SUPPORT 1

// Do u want to use mmc or spi mode for the sd card, this is board specific ,
//  as mmc uses specific pins but is quicker,
define HAL_ESP32_SDMMC 1

define HAL_ESP32_SDCARD 1
define LOGGER_MAVLINK_SUPPORT 1

define HAL_OS_POSIX_IO 1

// this becomes the default value for the ardupilot param LOG_BACKEND_TYPE, which most ppl want to be 1, for log-to-flash
// setting to 2 means log-over-mavlink to a companion computer etc.
#define HAL_LOGGING_BACKENDS_DEFAULT 1

# We need to tell HAL_ChibiOS/Storage.cpp how much storage is
# available (in bytes).
define HAL_xSTORAGE_SIZE 4096

# allow to have have a dedicated safety switch pin
define HAL_HAVE_SAFETY_SWITCH 1

# This enables the use of a ramtron device for storage, if one is
# found on SPI. You must have a ramtron entry in the SPI device table.

# Enable RAMTROM parameter storage.
define HAL_WITH_RAMTRON 1

# Setup for the possibility of an IMU heater since the pixhawk2 cube has
# an IMU heater.
define HAL_HAVE_IMU_HEATER 1

# Enable FAT filesystem support (needs a microSD defined via SDIO) - no worky assumes chibios
# define HAL_OS_FATFS_IO 1
# esp32 uses AP_FILESYSTEM_ESP32_ENABLED  not AP_FILESYSTEM_FATFS_ENABLED
define AP_FILESYSTEM_ESP32_ENABLED 1

# Now setup the default battery pins driver analog pins and default
# scaling for the power brick.
define HAL_BATT_VOLT_PIN 2
define HAL_BATT_CURR_PIN 3
define HAL_BATT_VOLT_SCALE 10.1
define HAL_BATT_CURR_SCALE 17.0

# This defines the default maximum clock on I2C devices.
define HAL_I2C_MAX_CLOCK 100000

# We can't share the IO UART (USART6).
DMA_NOSHARE USART6_TX ADC1
DMA_PRIORITY USART6* SPI*

# List of files to put in ROMFS. For fmuv3 we need an IO firmware so
# we can automatically update the IOMCU firmware on boot. The format
# is "ROMFS ROMFS-filename source-filename". Paths are relative to the
# ardupilot root.
# RxOMFS io_firmware.bin Tools/IO_Firmware/iofirmware_lowpolh.bin

# which gpio pin does this board read its RCIN in on?
define HAL_ESP32_RMT_RX_PIN_NUMBER 4