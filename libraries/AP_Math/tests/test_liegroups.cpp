#include "math_test.h"
#include <AP_Math/LieGroups.h>


const AP_HAL::HAL& hal = AP_HAL::get_HAL();

// given we are in the Math library, you're epected to know what
// you're doing when directly comparing floats:
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"

void expect_GL2_near(const GL2& A, const GL2& B, ftype abs_tol = 1e-6);
void expect_GL2_near(const GL2& A, const GL2& B, ftype abs_tol) {
    EXPECT_NEAR(A.a11(), B.a11(), abs_tol);
    EXPECT_NEAR(A.a12(), B.a12(), abs_tol);
    EXPECT_NEAR(A.a21(), B.a21(), abs_tol);
    EXPECT_NEAR(A.a22(), B.a22(), abs_tol);
}
void expect_SIM23_near(const SIM23& A, const SIM23& B, ftype abs_tol = 1e-5);
void expect_SIM23_near(const SIM23& A, const SIM23& B, ftype abs_tol) {
    EXPECT_NEAR(A.R().a.x, B.R().a.x, abs_tol);
    EXPECT_NEAR(A.R().a.y, B.R().a.y, abs_tol);
    EXPECT_NEAR(A.R().a.z, B.R().a.z, abs_tol);
    EXPECT_NEAR(A.R().b.x, B.R().b.x, abs_tol);
    EXPECT_NEAR(A.R().b.y, B.R().b.y, abs_tol);
    EXPECT_NEAR(A.R().b.z, B.R().b.z, abs_tol);
    EXPECT_NEAR(A.R().c.x, B.R().c.x, abs_tol);
    EXPECT_NEAR(A.R().c.y, B.R().c.y, abs_tol);
    EXPECT_NEAR(A.R().c.z, B.R().c.z, abs_tol);

    EXPECT_NEAR(A.W1().x, B.W1().x, abs_tol);
    EXPECT_NEAR(A.W1().y, B.W1().y, abs_tol);
    EXPECT_NEAR(A.W1().z, B.W1().z, abs_tol);

    EXPECT_NEAR(A.W2().x, B.W2().x, abs_tol);
    EXPECT_NEAR(A.W2().y, B.W2().y, abs_tol);
    EXPECT_NEAR(A.W2().z, B.W2().z, abs_tol);

    expect_GL2_near(A.A(), B.A(), abs_tol);
    
}

void expect_Gal3_near(const Gal3& A, const Gal3& B, ftype abs_tol = 1e-5);
void expect_Gal3_near(const Gal3& A, const Gal3& B, ftype abs_tol) {
    EXPECT_NEAR(A.rot().a.x, B.rot().a.x, abs_tol);
    EXPECT_NEAR(A.rot().a.y, B.rot().a.y, abs_tol);
    EXPECT_NEAR(A.rot().a.z, B.rot().a.z, abs_tol);
    EXPECT_NEAR(A.rot().b.x, B.rot().b.x, abs_tol);
    EXPECT_NEAR(A.rot().b.y, B.rot().b.y, abs_tol);
    EXPECT_NEAR(A.rot().b.z, B.rot().b.z, abs_tol);
    EXPECT_NEAR(A.rot().c.x, B.rot().c.x, abs_tol);
    EXPECT_NEAR(A.rot().c.y, B.rot().c.y, abs_tol);
    EXPECT_NEAR(A.rot().c.z, B.rot().c.z, abs_tol);

    EXPECT_NEAR(A.pos().x, B.pos().x, abs_tol);
    EXPECT_NEAR(A.pos().y, B.pos().y, abs_tol);
    EXPECT_NEAR(A.pos().z, B.pos().z, abs_tol);

    EXPECT_NEAR(A.vel().x, B.vel().x, abs_tol);
    EXPECT_NEAR(A.vel().y, B.vel().y, abs_tol);
    EXPECT_NEAR(A.vel().z, B.vel().z, abs_tol);

    EXPECT_NEAR(A.tau(), B.tau(), abs_tol);
    
}

// --------------------------- SIM23 Tests

class SIM23TestParam {
public:
    SIM23 X1; // First SIM23 object
    SIM23 X2; // Second SIM23 object
    SIM23 X1X2; // Expected result of multiplication
    SIM23 X1Inv; // Expected inverse
};

class SIM23Test : public ::testing::TestWithParam<SIM23TestParam> {};

static SIM23TestParam SIM23_test_params[] = {
{
    .X1 = SIM23(Matrix3F({ 0.1917628679600295, 0.15437712892699978, -0.9692237639141958 },{ 0.7546747165171042, 0.6081618129984631, 0.24618139950095896 }, { 0.6274496591134404, -0.7786571204803041, 0.00011833743464839674 }), Vector3F(-1.8832176436472945, -11.82459331709211, 4.114945584717598), Vector3F(13.554090261228655, -4.707415490056032, 4.307860302152519), GL2(0.8734952525337151,0.12285290723570891,-0.026621675568959228,1.0653325556524755)),
    .X2 = SIM23(Matrix3F({ 0.7847281977508753, 0.15027303744240475, 0.6013482101681993 },{ -0.38849934280462106, 0.8751979559617898, 0.28826515315015505 }, { -0.48298024420781505, -0.4598331785529817, 0.7451734909447738 }), Vector3F(-3.979161859453162, -2.91357254564766, 9.52623956594262), Vector3F(12.001488950924156, -10.782542802989113, 6.753625716350388), GL2(0.8297162969738252,-0.02976856491948301,0.12870680477544083,0.9325179379310014)),
    .X1X2 = SIM23(Matrix3F({ 0.5586222468249054, 0.6096085804109298, -0.5624220515250673 },{ 0.23704331306145526, 0.5324668621291347, 0.8125820010726312 }, { 0.7948280651091425, -0.5872447696009934, 0.15294419731108697 }), Vector3F(-10.263934943336904, -12.846647608351587, 3.7417659148951596), Vector3F(6.7865803913070915, 0.12455831061409668, 19.821694069363343), GL2(0.7405652515041722,0.08855983959236176,0.11502711118896922,0.9942342070852502)),
    .X1Inv = SIM23(Matrix3F({ 0.19176286796002945, 0.7546747165171043, 0.6274496591134406 },{ 0.15437712892699978, 0.6081618129984632, -0.7786571204803043 }, { -0.9692237639141957, 0.24618139950095902, 0.0001183374346484141 }), Vector3F(7.596937743045436, 12.308493910298958, 1.64559958545432), Vector3F(-2.5183452080544275, 2.452417907529113, 13.228872020913538), GL2(1.1408164073163818,-0.13155761693134033,0.028507947230357215,0.9353865236880062)),
    },
    {
    .X1 = SIM23(Matrix3F({ 0.9983254258700769, -0.01929429198771679, 0.054535074566946964 },{ 0.022410963254721875, 0.9981152654324746, -0.05712850108882989 }, { -0.053330036445939574, 0.05825501873103862, 0.9968762510990625 }), Vector3F(-3.120978134436359, 21.152572647201602, 15.23414127583007), Vector3F(5.950008526964504, -8.071929956435339, 4.342692918623701), GL2(0.6534874393542799,0.06926647737977558,-0.2390993184253096,1.3408131664377576)),
    .X2 = SIM23(Matrix3F({ 0.5474381845278147, -0.6473744923200626, 0.5302996330511947 },{ 0.20321747261140136, 0.717559794337195, 0.6661911140027288 }, { -0.8117968298449587, -0.25693230284279894, 0.5243774392644782 }), Vector3F(-7.937340649193273, -11.09008473816001, 23.910298136574816), Vector3F(-3.628730572239748, -6.956039923574111, 0.5946092545693841), GL2(0.8111824043221031,0.14503173238530584,-0.10864814203602838,0.9072469747979189)),
    .X1X2 = SIM23(Matrix3F({ 0.49832912080389613, -0.6741470462276286, 0.5451548838829015 },{ 0.2614798147314364, 0.7163772559718224, 0.6468631490619138 }, { -0.8266174410492618, -0.17980374631482432, 0.5332674928816913 }), Vector3F(-9.584263677461143, 5.422569115110549, 35.49869577187355), Vector3F(1.4894713020371813, -11.313661895966886, 6.530376855726141), GL2(0.522571838177006,0.15761821747929858,-0.3396300193429252,1.1817717006565056)),
    .X1Inv = SIM23(Matrix3F({ 0.9983254258700769, 0.022410963254721868, -0.05333003644593958 },{ -0.019294291987716785, 0.9981152654324743, 0.0582550187310386 }, { 0.054535074566946964, -0.057128501088829886, 0.9968762510990625 }), Vector3F(3.7072672542633267, -31.010968642436822, -22.10746444959688), Vector3F(-4.314052537324238, 7.507798152289749, -2.672589110746437), GL2(1.5018638374626196,-0.07758636335701335,0.2678185364624415,0.7319805458129053)),
    },
    {
    .X1 = SIM23(Matrix3F({ 0.006132270634288839, 0.9327138883400026, -0.36056510889788124 },{ -0.7404110420381698, -0.23811938443936725, -0.6285623657061948 }, { -0.6721263899630927, 0.2708209025387256, 0.689131449480642 }), Vector3F(-8.990782125134626, -5.81070391863939, 5.518391204318962), Vector3F(-12.200250252830214, -1.3562562815679913, 15.754933026088993), GL2(0.9622216962391105,-0.10059524154411667,-0.35349189606771764,1.0312992781773804)),
    .X2 = SIM23(Matrix3F({ 0.30634051009659397, 0.9170410477560602, -0.25532569123420745 },{ -0.6854116576487672, 0.39862214327210715, 0.6093531377225531 }, { 0.660580314142745, -0.011666345769731579, 0.7506647353802184 }), Vector3F(-19.59610294067617, -7.668716933789952, 8.37763647274462), Vector3F(-4.481447071887171, -5.211100787198272, -19.589057013637714), GL2(1.0374386531038002,-0.04024494732457701,0.2702781239352229,1.001568956496499)),
    .X1X2 = SIM23(Matrix3F({ -0.8755966223096654, 0.38163043035024824, 0.2961228961606809 },{ -0.47882401928873797, -0.7665739512445261, -0.4278924348776606 }, { 0.06370332449788849, -0.5164519260338171, 0.8539433790034777 }), Vector3F(-22.91841645173025, 4.674558903276463, 26.850707930548147), Vector3F(-9.682375410398828, 15.747388310932172, 3.65895303733976), GL2(0.9710572873722023,-0.13947763258156232,-0.08798852241806958,1.0471436046166216)),
    .X1Inv = SIM23(Matrix3F({ 0.0061322706342888415, -0.7404110420381699, -0.6721263899630927 },{ 0.9327138883400027, -0.2381193844393673, 0.2708209025387257 }, { -0.3605651088978813, -0.628562365706195, 0.6891314494806421 }), Vector3F(2.9889314947145897, 8.44516416300186, -17.48173149019638), Vector3F(9.658308567672407, 7.4073261274112445, -17.32501460101974), GL2(1.0778866853146454,0.1051394815848638,0.36946036538627947,1.0056886266128278)),
    },
    {
    .X1 = SIM23(Matrix3F({ 0.2768497392559244, 0.9592685465530777, 0.05619677453264149 },{ 0.6843494353208697, -0.1557769112150103, -0.7123197346054073 }, { -0.6745517565390619, 0.2356637637106236, -0.6996016854066389 }), Vector3F(-6.8702343303465465, 7.254691250525717, 11.446551151400158), Vector3F(-4.82832531874877, -15.902552689105603, -1.262800542017789), GL2(0.5538735934226668,0.016809147737119074,0.1139276895486837,0.8013264411012088)),
    .X2 = SIM23(Matrix3F({ 0.9555446203518642, -0.29444447958539155, -0.01539243185138317 },{ -0.023733445165651595, -0.024775454745577408, -0.9994112769139233 }, { 0.29388977882393347, 0.9553473846113977, -0.030662234409476352 }), Vector3F(-8.522998090129162, -5.940998172565139, -6.586140121271638), Vector3F(1.7112360812692575, 12.566246175209914, 6.038201334607786), GL2(1.1972355865982498,-0.010307484453747818,0.0745312179580717,0.5947344217684667)),
    .X1X2 = SIM23(Matrix3F({ 0.2582911891810795, -0.05159575028918814, -0.964688312432321 },{ 0.44828005488698286, -0.8781562649857575, 0.16699271438235824 }, { -0.8557631997123664, -0.4755832764283875, -0.20369068019841402 }), Vector3F(-17.013872307701558, 7.2845369122446115, 22.56690039213572), Vector3F(10.066730973007711, -14.620150636465487, -3.286260363833167), GL2(0.6643699827763516,0.004287935306310665,0.1961221198638817,0.47540210970723623)),
    .X1Inv = SIM23(Matrix3F({ 0.27684973925592427, 0.6843494353208693, -0.6745517565390617 },{ 0.9592685465530776, -0.1557769112150102, 0.23566376371062364 }, { 0.05619677453264142, -0.7123197346054072, -0.6996016854066388 }), Vector3F(5.516691398681386, 8.475978342544883, 27.66953990470675), Vector3F(14.070505820919243, 2.8821368051404455, -15.48048827179767), GL2(1.813289984913272,-0.03803675716073863,-0.2578024733328932,1.2533386998700051)),
    },
    {
    .X1 = SIM23(Matrix3F({ 0.8340119460918359, 0.5143725335950897, 0.1996120498844619 },{ -0.45738579255253514, 0.8468835488786137, -0.27126830152056847 }, { -0.3085811247422595, 0.13494128842475547, 0.9415776856590587 }), Vector3F(13.695786551813352, -2.400605654522401, -6.954511213973873), Vector3F(3.7383033473719394, -3.7451788989336925, 3.991332532208447), GL2(0.8314492141930544,-0.3439488128942128,0.21443530096327518,0.7305415565082499)),
    .X2 = SIM23(Matrix3F({ 0.3463945982850443, 0.8034811626198316, -0.4841784832001792 },{ 0.5313318740794283, 0.2573167849508475, 0.8071397101926046 }, { 0.773108803381636, -0.5368482965397605, -0.337782007567265 }), Vector3F(2.823946013496719, -1.2584685040901982, 0.20611337702604673), Vector3F(-8.29514115709139, 0.8311908210952679, -13.029018925372613), GL2(0.7350938750289119,-0.3386280391373506,-0.15771443774076374,1.0663614518616065)),
    .X1X2 = SIM23(Matrix3F({ 0.716521588308204, 0.6953081857471238, -0.05606550027718888 },{ 0.08182034329625337, -0.0039535907641439685, 0.9966392529611469 }, { 0.692749770776701, -0.7187008389817786, -0.05972318758836975 }), Vector3F(11.227130188579116, -3.587322812826449, -6.588873405282337), Vector3F(-9.742849026143203, 4.85155935658563, -2.9847518882289763), GL2(0.66543891838813,-0.6483257725284338,0.04241312549712388,0.7064075493563537)),
    .X1Inv = SIM23(Matrix3F({ 0.8340119460918359, -0.4573857925525351, -0.3085811247422594 },{ 0.5143725335950896, 0.8468835488786136, 0.1349412884247554 }, { 0.19961204988446182, -0.2712683015205684, 0.9415776856590584 }), Vector3F(-14.596646072227964, -4.592122286797756, 5.130298043050377), Vector3F(-11.798959824726005, -1.189803267061133, -5.141046948357577), GL2(1.07249158917607,0.5049434979431884,-0.3148076309372207,1.2206318464773516)),
    },
};


TEST_P(SIM23Test, Multiplication)
{
    auto param = GetParam();
    SIM23 result = param.X1 * param.X2;

    expect_SIM23_near(result, param.X1X2);
}

TEST_P(SIM23Test, Identity)
{
    auto param = GetParam();
    SIM23 result = param.X1 * SIM23::identity();
    expect_SIM23_near(result, param.X1);

    result = SIM23::identity() * param.X1;
    expect_SIM23_near(result, param.X1);
}

TEST_P(SIM23Test, Inverse)
{
    auto param = GetParam();
    SIM23 result = param.X1.inverse();

    expect_SIM23_near(result, param.X1Inv);
}

INSTANTIATE_TEST_CASE_P(SIM23OperationTests,
                        SIM23Test,
                        ::testing::ValuesIn(SIM23_test_params));







// --------------------------- GL2 Tests

class GL2TestParam {
public:
    GL2 A1; // First GL2 object
    GL2 A2; // Second GL2 object
    GL2 A1A2; // Expected result of multiplication
    GL2 A1Inv; // Expected inverse
    GL2 A1Exp; // Expected exponential
    ftype A1Trace; // Expected trace
    ftype A1Det; // Expected determinant
};

class GL2Test : public ::testing::TestWithParam<GL2TestParam> {};

static GL2TestParam GL2_test_params[] = {
    {
    .A1 = GL2(2.,-1.,0.5,3.),
    .A2 = GL2(-1.2,-0.4,2.1,1.7),
    .A1A2 = GL2(-4.5, -2.5,  5.7,  4.9),
    .A1Inv = GL2(0.46153846,  0.15384615, -0.07692308,  0.30769231),
    .A1Exp = GL2(4.85054553, -11.68119746,   5.84059873,  16.53174299),
    .A1Trace = 5.0,
    .A1Det = 6.5
    },
    {
    .A1 = GL2(-0.3,1.2,1.2,0.2),
    .A2 = GL2(2.4,0.75,-0.3333,-2.1),
    .A1A2 = GL2(-1.11996, -2.745  ,  2.81334,  0.48   ),
    .A1Inv = GL2(-0.13333333,  0.8       ,  0.8       ,  0.2),
    .A1Exp = GL2(1.4579238 , 1.44957828, 1.44957828, 2.06191475),
    .A1Trace = -0.1,
    .A1Det = -1.5
    },
};


TEST_P(GL2Test, Multiplication)
{
    auto param = GetParam();
    GL2 result = param.A1 * param.A2;

    expect_GL2_near(result, param.A1A2);
}

TEST_P(GL2Test, Inverse)
{
    auto param = GetParam();
    GL2 result = param.A1.inverse();

    expect_GL2_near(result, param.A1Inv);
}

TEST_P(GL2Test, Exponential)
{
    auto param = GetParam();
    GL2 result = GL2::exponential(param.A1);

    expect_GL2_near(result, param.A1Exp);
}

TEST_P(GL2Test, DetTrace)
{
    auto param = GetParam();
    ftype determinant = param.A1.det();
    ftype trace = param.A1.trace();

    EXPECT_NEAR(determinant, param.A1Det, 1e-6);
    EXPECT_NEAR(trace, param.A1Trace, 1e-6);
}

INSTANTIATE_TEST_CASE_P(GL2OperationTests,
                        GL2Test,
                        ::testing::ValuesIn(GL2_test_params));




// --------------------------- Gal3 Tests
class Gal3TestParam {
public:
    Gal3 X1; // First Gal3 object
    Gal3 X2; // Second Gal3 object
    Gal3 X1X2; // Expected result of multiplication
    Gal3 X1Inv; // Expected inverse of first object
};

class Gal3Test : public ::testing::TestWithParam<Gal3TestParam> {};

static Gal3TestParam gal3_multiplication_params[] = {
    {
    .X1 = Gal3(Matrix3F({ 0.9723737239170699, 0.23140993502479876, 0.03063956604568773 },{ -0.2139367484450954, 0.8309546995976996, 0.5135614421675722 }, { 0.09338312856394149, -0.5059285811142863, 0.8575056047113017 }), Vector3F(0.9012350036632839, 5.3185924960396935, 1.6214839371632304), Vector3F(17.970577570323695, -16.179441736469983, 10.792018461410597), -1.7467353466732727),
    .X2 = Gal3(Matrix3F({ 0.7490372941848541, -0.04665386679992918, -0.6608831580792834 },{ -0.054239975997953646, 0.989850873713496, -0.131351714158477 }, { 0.660303836823605, 0.1342336191914801, 0.7389047154774308 }), Vector3F(6.786181814483604, 10.426351565364033, -0.5802145906191909), Vector3F(-16.054688311434017, 9.802542355865862, 3.225785920008188), 1.5861394209059594),
    .X1X2 = Gal3(Matrix3F({ 0.7360239367964371, 0.18780919201567137, -0.6503817893030946 },{ 0.1337890245643258, 0.9014394230380353, 0.41171284106641665 }, { 0.6636032409269869, -0.3900444512966117, 0.6383541843239727 }), Vector3F(38.3987652015465, -13.430221531202358, 13.600318221737089), Vector3F(4.726662881000841, -2.9426460140068116, 7.09952459935986), -0.1605959257673133),
    .X1Inv = Gal3(Matrix3F({ 0.9723737239170701, -0.21393674844509541, 0.09338312856394153 },{ 0.23140993502479884, 0.8309546995976997, -0.5059285811142864 }, { 0.03063956604568774, 0.5135614421675723, 0.8575056047113019 }), Vector3F(-38.21902918477211, 21.949307175539673, -6.762042909210848), Vector3F(-21.94328703719982, 14.745803547420836, -1.4956895835047828), 1.746735346673273),
    },
    {
    .X1 = Gal3(Matrix3F({ -0.0022311882462270893, -0.9121382951504995, -0.4098765086205232 },{ 0.5994639410028433, -0.32928624542067114, 0.7295296786382971 }, { -0.8003986539446137, -0.2440784691378931, 0.54752871675096 }), Vector3F(-11.004429462165845, 10.119364454246309, -11.037814215535445), Vector3F(4.901860298922303, 14.16186193411872, 17.720415361633936), 0.24155781030425375),
    .X2 = Gal3(Matrix3F({ -0.12286170688505987, 0.9862675472074331, -0.11036904596273234 },{ 0.13681686590057485, -0.09331689915771085, -0.986191209419722 }, { -0.9829476823241582, -0.13626548226540608, -0.12347296123663082 }), Vector3F(-4.863013104030085, -9.928780231229265, -6.998219123569017), Vector3F(-2.6371826183643243, 5.033373751984102, -5.592788115893007), 1.0815114488267774),
    .X1X2 = Gal3(Matrix3F({ 0.27836538897358964, 0.1387693888639175, 0.9503976888313213 },{ -0.8357925818944799, 0.5225500886035435, 0.16849974762766942 }, { -0.47324778950539376, -0.8412398359652046, 0.26144228447880175 }), Vector3F(6.232665163314326, 20.684381487900268, 10.611042561593496), Vector3F(2.60896386319008, 6.843440387100531, 15.540462519440823), 1.3230692591310311),
    .X1Inv = Gal3(Matrix3F({ -0.002231188246227112, 0.5994639410028433, -0.8003986539446138 },{ -0.9121382951504998, -0.32928624542067125, -0.2440784691378932 }, { -0.40987650862052327, 0.7295296786382971, 0.54752871675096 }), Vector3F(-16.30343962130274, -12.650771030244984, -1.4952877922437522), Vector3F(5.704808008909906, 13.459652694532004, -18.02477748389916), -0.24155781030425375),
    },
    {
    .X1 = Gal3(Matrix3F({ 0.4095324843731364, 0.6426069192310672, 0.6475642760371543 },{ 0.5466836795862539, 0.39539750017281894, -0.738104173766224 }, { -0.7303561451218175, 0.6562904572012629, -0.1893745945721242 }), Vector3F(0.7489969206149831, -0.0018563902590064268, 1.460978227111798), Vector3F(-10.449052987820558, 1.3196329836917773, 5.103264015307309), 0.4648565585680795),
    .X2 = Gal3(Matrix3F({ 0.9933756683626145, 0.09015741432365766, 0.07124901506407959 },{ -0.08812660169019783, 0.9956219014556433, -0.03115656297454252 }, { -0.07374607501193765, 0.024671237997347013, 0.9969718383364758 }), Vector3F(-8.833646567866676, -10.877332191003482, 6.970435916276825), Vector3F(7.787781763009253, 4.984010635298371, -14.11353279668239), -0.4132297051122636),
    .X1X2 = Gal3(Matrix3F({ 0.30243351769023785, 0.6926921250587061, 0.6547607099232228 },{ 0.5626495133500865, 0.42474405421948797, -0.7092376283955215 }, { -0.7693890384613103, 0.5828980256329978, -0.26128604863010535 }), Vector3F(-1.0268528604646616, -14.82215614849824, -2.6548467947675753), Vector3F(-13.19636330270588, 17.96500898355788, 5.35911291771391), 0.05162685345581591),
    .X1Inv = Gal3(Matrix3F({ 0.4095324843731364, 0.5466836795862535, -0.7303561451218172 },{ 0.642606919231067, 0.39539750017281877, 0.6562904572012627 }, { 0.6475642760371542, -0.7381041737662237, -0.1893745945721242 }), Vector3F(-2.625171661124262, -2.7612830378645725, -4.257175969196386), Vector3F(7.285005047979422, 2.8436306926634325, 8.70688860032769), -0.4648565585680795),
    },
    {
    .X1 = Gal3(Matrix3F({ 0.9912134963212346, 0.06486021697835657, -0.1152777383719617 },{ -0.058210546963924234, 0.9964908194260627, 0.060146313450909955 }, { 0.11877431091273363, -0.052907457443113315, 0.9915106978818284 }), Vector3F(-10.827553932411933, -14.267144288180729, 0.5692004110039051), Vector3F(-1.6217623687642102, -17.613750435483382, -0.3818200623033735), 1.8930652540126605),
    .X2 = Gal3(Matrix3F({ -0.2672434973796143, -0.7086590772151046, 0.652980264164966 },{ -0.8177601491880243, 0.5252428598196848, 0.23534714064211487 }, { -0.5097541088684745, -0.4710862452768873, -0.7198808915387545 }), Vector3F(-7.793550529887408, -11.168702017317042, 8.393173021691172), Vector3F(3.401721320703317, 13.893514024832744, -12.852000626405253), -0.6066151535231121),
    .X1X2 = Gal3(Matrix3F({ -0.2591721613231782, -0.6140593188382675, 0.7454937583527816 },{ -0.8299939214182267, 0.5363170193042114, 0.15321274494454104 }, { -0.4939027041876439, -0.5790468096385036, -0.6486639430734558 }), Vector3F(-19.26079121350685, -13.753400134257886, 8.787973119821286), Vector3F(4.1327556150501366, -4.740007777014352, -13.455749568788589), 1.2864501004895483),
    .X1Inv = Gal3(Matrix3F({ 0.9912134963212346, -0.058210546963924234, 0.11877431091273362 },{ 0.06486021697835657, 0.9964908194260625, -0.0529074574431133 }, { -0.11527773837196169, 0.06014631345090995, 0.9915106978818283 }), Vector3F(8.64630636028142, -18.438383579005663, -3.3227052271672743), Vector3F(0.627557115602174, 17.63692733504914, 1.2510277331304926), -1.8930652540126605),
    },
    {
    .X1 = Gal3(Matrix3F({ 0.24707327008141017, 0.5239514505109054, -0.8151255588673421 },{ -0.9382739515098758, -0.08078334843945051, -0.3363272848475924 }, { -0.24206774078617282, 0.8479085611800534, 0.4716505918031374 }), Vector3F(-2.2745897417152365, -4.7685980235261525, 6.851421332566047), Vector3F(-3.9303382044630912, -19.701325699601632, 0.09260484614669803), 0.4271932837063752),
    .X2 = Gal3(Matrix3F({ 0.8008782390138895, 0.13856292920788246, -0.5825756267844909 },{ -0.33219415723211754, 0.9122448363660098, -0.23970064752602382 }, { 0.4982379834726115, 0.3854992518447776, 0.7766268335901498 }), Vector3F(-4.061791009980425, -21.3759729366698, -14.682456012218061), Vector3F(-6.7683896418701455, 6.918445325636035, -1.8241766539503044), 1.4780746281768786),
    .X1X2 = Gal3(Matrix3F({ -0.38230451980986285, 0.19797690816358826, -0.90257874890058 },{ -0.8921784618338842, -0.33335809628264024, 0.30477856204552556 }, { -0.24054281609034703, 0.9217795416892263, 0.3040750403280832 }), Vector3F(-8.319409772855126, -23.412621744956027, -17.078332744408378), Vector3F(-0.4907638882936993, -13.296096803260289, 6.736848658788526), 1.9052679118832538),
    .X1Inv = Gal3(Matrix3F({ 0.24707327008141022, -0.9382739515098759, -0.24206774078617285 },{ 0.5239514505109055, -0.08078334843945055, 0.8479085611800535 }, { -0.8151255588673421, -0.33632728484759233, 0.4716505918031374 }), Vector3F(5.218602038084879, -5.169111187868508, -2.471474326981081), Vector3F(-17.491742555553117, 0.38924690266229656, -9.873489636384681), -0.4271932837063752),
    },
};


TEST_P(Gal3Test, Multiplication)
{
    auto param = GetParam();
    Gal3 result = param.X1 * param.X2;
    
    // Test if equal
    expect_Gal3_near(result, param.X1X2);
}


TEST_P(Gal3Test, Identity)
{
    auto param = GetParam();
    Gal3 result = param.X1 * Gal3::identity();
    expect_SIM23_near(result, param.X1);

    result = Gal3::identity() * param.X1;
    expect_SIM23_near(result, param.X1);
}

TEST_P(Gal3Test, Inverse)
{
    auto param = GetParam();
    Gal3 result = param.X1.inverse();

    expect_SIM23_near(result, param.X1Inv);
}

INSTANTIATE_TEST_CASE_P(Gal3MultiplicationTests,
                        Gal3Test,
                        ::testing::ValuesIn(gal3_multiplication_params));

AP_GTEST_MAIN()

#pragma GCC diagnostic pop
