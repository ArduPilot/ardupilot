// CortexDefines.h was generated by ProtoGen version 3.5.c

/*
 * This file is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Author: Oliver Walters / Currawong Engineering Pty Ltd
 */

#ifndef _CORTEXDEFINES_H
#define _CORTEXDEFINES_H

// Language target is C, C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * \file
 */

#include <stdint.h>
#include <stdbool.h>
#include "CortexProtocol.h"

/*!
 * Status bits for the TelemetryStatus packet
 */
typedef struct
{
    uint8_t mode;            //!< Cortex operational mode
    bool    warning;         //!< Warning flag (refer to 'warning' structure)
    bool    error;           //!< Error flag (refer to 'error' structure)
    bool    powerLimit;      //!< Set if generator power limit is currently active
    bool    shorePower;      //!< Set if CHPS is running from shore power
    bool    readyToRun;      //!< Set if the CHPS is ready to run the engine
    bool    calibrationMode; //!< Set if the CHPS is in calibration mode
    uint8_t batteryCharger;  //!< Battery charger enabled status
    uint8_t avionicsRail;    //!< Avionics output rail enabled status
    uint8_t payloadRail;     //!< Payload output rail enabled status
    uint8_t servoRail;       //!< Servo output rail enabled status
}Cortex_StatusBits_t;

//! return the minimum encoded length for the Cortex_StatusBits_t structure
#define getMinLengthOfCortex_StatusBits_t() (4)

//! return the maximum encoded length for the Cortex_StatusBits_t structure
#define getMaxLengthOfCortex_StatusBits_t() (4)

//! Encode a Cortex_StatusBits_t into a byte array
void encodeCortex_StatusBits_t(uint8_t* data, int* bytecount, const Cortex_StatusBits_t* user);

//! Decode a Cortex_StatusBits_t from a byte array
int decodeCortex_StatusBits_t(const uint8_t* data, int* bytecount, Cortex_StatusBits_t* user);

/*!
 * Warning bits for the TelemetryStatus packet
 */
typedef struct
{
    bool generator;             //!< Generator warning - refer to the motor warnings packet
    bool temperature;           //!< Device overtemperature warning
    bool generatorTempLimit;    //!< Generator temperature limit warning
    bool generatorCurrentLimit; //!< Generator current limit warning
    bool enginePowerLimit;      //!< Engine power limit warning
    bool powerLoss;             //!< Power loss warning (engine is not developing any power)
    bool lowRpm;                //!< Low RPM warning (engine speed is below minimum RPM threshold)
}Cortex_WarningBits_t;

//! return the minimum encoded length for the Cortex_WarningBits_t structure
#define getMinLengthOfCortex_WarningBits_t() (2)

//! return the maximum encoded length for the Cortex_WarningBits_t structure
#define getMaxLengthOfCortex_WarningBits_t() (2)

//! Encode a Cortex_WarningBits_t into a byte array
void encodeCortex_WarningBits_t(uint8_t* data, int* bytecount, const Cortex_WarningBits_t* user);

//! Decode a Cortex_WarningBits_t from a byte array
int decodeCortex_WarningBits_t(const uint8_t* data, int* bytecount, Cortex_WarningBits_t* user);

/*!
 * Error bits for the TelemetryStatus packet
 */
typedef struct
{
    bool generator;          //!< Critical generator fault - refer to the motor errors packet
    bool cranking;           //!< Critical error occurred during engine cranking
    bool avionicsRail;       //!< Critical error occurred during rail configuration
    bool payloadRail;        //!< Critical error occurred during rail configuration
    bool servoRail;          //!< Critical error occurred during rail configuration
    bool batteryChargerRail; //!< Critical error occurred during rail configuration
    bool powerMap;           //!< Power map is impoperly configured
}Cortex_ErrorBits_t;

//! return the minimum encoded length for the Cortex_ErrorBits_t structure
#define getMinLengthOfCortex_ErrorBits_t() (2)

//! return the maximum encoded length for the Cortex_ErrorBits_t structure
#define getMaxLengthOfCortex_ErrorBits_t() (2)

//! Encode a Cortex_ErrorBits_t into a byte array
void encodeCortex_ErrorBits_t(uint8_t* data, int* bytecount, const Cortex_ErrorBits_t* user);

//! Decode a Cortex_ErrorBits_t from a byte array
int decodeCortex_ErrorBits_t(const uint8_t* data, int* bytecount, Cortex_ErrorBits_t* user);

typedef struct
{
    bool status;     //!< Enable TelemetryStatus packet
    bool generator;  //!< Enable TelemetryGenerator packet
    bool battery;    //!< Enable TelemetryBattery packet
    bool outputRail; //!< Enable TelemetryOutputRail packet
}Cortex_TelemetryPackets_t;

//! return the minimum encoded length for the Cortex_TelemetryPackets_t structure
#define getMinLengthOfCortex_TelemetryPackets_t() (1)

//! return the maximum encoded length for the Cortex_TelemetryPackets_t structure
#define getMaxLengthOfCortex_TelemetryPackets_t() (1)

//! Encode a Cortex_TelemetryPackets_t into a byte array
void encodeCortex_TelemetryPackets_t(uint8_t* data, int* bytecount, const Cortex_TelemetryPackets_t* user);

//! Decode a Cortex_TelemetryPackets_t from a byte array
int decodeCortex_TelemetryPackets_t(const uint8_t* data, int* bytecount, Cortex_TelemetryPackets_t* user);

typedef struct
{
    bool     enableOnStartup; //!< Enable output rail at startup
    uint16_t voltage;         //!< Rail voltage. Invalid values will be clipped.
}Cortex_OutputRailSettings_t;

//! return the minimum encoded length for the Cortex_OutputRailSettings_t structure
#define getMinLengthOfCortex_OutputRailSettings_t() (2)

//! return the maximum encoded length for the Cortex_OutputRailSettings_t structure
#define getMaxLengthOfCortex_OutputRailSettings_t() (2)

//! Encode a Cortex_OutputRailSettings_t into a byte array
void encodeCortex_OutputRailSettings_t(uint8_t* data, int* bytecount, const Cortex_OutputRailSettings_t* user);

//! Decode a Cortex_OutputRailSettings_t from a byte array
int decodeCortex_OutputRailSettings_t(const uint8_t* data, int* bytecount, Cortex_OutputRailSettings_t* user);

#ifdef __cplusplus
}
#endif
#endif // _CORTEXDEFINES_H
