// CortexPackets.h was generated by ProtoGen version 3.5.c

/*
 * This file is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Author: Oliver Walters / Currawong Engineering Pty Ltd
 */

#ifndef _CORTEXPACKETS_H
#define _CORTEXPACKETS_H

// Language target is C, C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * \file
 */

#include <stdint.h>
#include <stdbool.h>
#include "CortexProtocol.h"
#include "CortexDefines.h"

//! Create the Cortex_Standby packet from parameters
void encodeCortex_StandbyPacket(void* pkt);

//! Decode the Cortex_Standby packet to parameters
int decodeCortex_StandbyPacket(const void* pkt);

//! return the packet ID for the Cortex_Standby packet
#define getCortex_StandbyPacketID() (PKT_CORTEX_STANDBY)

//! return the minimum encoded length for the Cortex_Standby packet
#define getCortex_StandbyMinDataLength() (2)

//! return the maximum encoded length for the Cortex_Standby packet
#define getCortex_StandbyMaxDataLength() (2)

//! Create the Cortex_StartCranking packet from parameters
void encodeCortex_StartCrankingPacket(void* pkt);

//! Decode the Cortex_StartCranking packet to parameters
int decodeCortex_StartCrankingPacket(const void* pkt);

//! return the packet ID for the Cortex_StartCranking packet
#define getCortex_StartCrankingPacketID() (PKT_CORTEX_CRANK)

//! return the minimum encoded length for the Cortex_StartCranking packet
#define getCortex_StartCrankingMinDataLength() (2)

//! return the maximum encoded length for the Cortex_StartCranking packet
#define getCortex_StartCrankingMaxDataLength() (2)

/*!
 * Overall system status information
 */
typedef struct
{
    Cortex_StatusBits_t  status;  //!< System status bits
    Cortex_WarningBits_t warning; //!< System warning bits
    Cortex_ErrorBits_t   error;   //!< System error bits
}Cortex_TelemetryStatus_t;

//! Create the Cortex_TelemetryStatus packet
void encodeCortex_TelemetryStatusPacketStructure(void* pkt, const Cortex_TelemetryStatus_t* user);

//! Decode the Cortex_TelemetryStatus packet
int decodeCortex_TelemetryStatusPacketStructure(const void* pkt, Cortex_TelemetryStatus_t* user);

//! Create the Cortex_TelemetryStatus packet from parameters
void encodeCortex_TelemetryStatusPacket(void* pkt, const Cortex_StatusBits_t* status, const Cortex_WarningBits_t* warning, const Cortex_ErrorBits_t* error);

//! Decode the Cortex_TelemetryStatus packet to parameters
int decodeCortex_TelemetryStatusPacket(const void* pkt, Cortex_StatusBits_t* status, Cortex_WarningBits_t* warning, Cortex_ErrorBits_t* error);

//! return the packet ID for the Cortex_TelemetryStatus packet
#define getCortex_TelemetryStatusPacketID() (PKT_CORTEX_TELEMETRY_STATUS)

//! return the minimum encoded length for the Cortex_TelemetryStatus packet
#define getCortex_TelemetryStatusMinDataLength() (8)

//! return the maximum encoded length for the Cortex_TelemetryStatus packet
#define getCortex_TelemetryStatusMaxDataLength() (8)

/*!
 * Generator status information
 */
typedef struct
{
    int16_t rpm;         //!< Generator speed
    uint8_t dutyCycle;   //!< Generator duty cycle
    float   voltage;     //!< Generator voltage
    float   current;     //!< Generator current
    float   temperature; //!< Generator temperature
}Cortex_TelemetryGenerator_t;

//! Create the Cortex_TelemetryGenerator packet
void encodeCortex_TelemetryGeneratorPacketStructure(void* pkt, const Cortex_TelemetryGenerator_t* user);

//! Decode the Cortex_TelemetryGenerator packet
int decodeCortex_TelemetryGeneratorPacketStructure(const void* pkt, Cortex_TelemetryGenerator_t* user);

//! Create the Cortex_TelemetryGenerator packet from parameters
void encodeCortex_TelemetryGeneratorPacket(void* pkt, int16_t rpm, uint8_t dutyCycle, float voltage, float current, float temperature);

//! Decode the Cortex_TelemetryGenerator packet to parameters
int decodeCortex_TelemetryGeneratorPacket(const void* pkt, int16_t* rpm, uint8_t* dutyCycle, float* voltage, float* current, float* temperature);

//! return the packet ID for the Cortex_TelemetryGenerator packet
#define getCortex_TelemetryGeneratorPacketID() (PKT_CORTEX_TELEMETRY_GENERATOR)

//! return the minimum encoded length for the Cortex_TelemetryGenerator packet
#define getCortex_TelemetryGeneratorMinDataLength() (8)

//! return the maximum encoded length for the Cortex_TelemetryGenerator packet
#define getCortex_TelemetryGeneratorMaxDataLength() (8)

/*!
 * Battery status information
 */
typedef struct
{
    float voltage;     //!< Battery voltage
    float current;     //!< Battery current
    float temperature; //!< Battery temperature
}Cortex_TelemetryBattery_t;

//! Create the Cortex_TelemetryBattery packet
void encodeCortex_TelemetryBatteryPacketStructure(void* pkt, const Cortex_TelemetryBattery_t* user);

//! Decode the Cortex_TelemetryBattery packet
int decodeCortex_TelemetryBatteryPacketStructure(const void* pkt, Cortex_TelemetryBattery_t* user);

//! Create the Cortex_TelemetryBattery packet from parameters
void encodeCortex_TelemetryBatteryPacket(void* pkt, float voltage, float current, float temperature);

//! Decode the Cortex_TelemetryBattery packet to parameters
int decodeCortex_TelemetryBatteryPacket(const void* pkt, float* voltage, float* current, float* temperature);

//! return the packet ID for the Cortex_TelemetryBattery packet
#define getCortex_TelemetryBatteryPacketID() (PKT_CORTEX_TELEMETRY_BATTERY)

//! return the minimum encoded length for the Cortex_TelemetryBattery packet
#define getCortex_TelemetryBatteryMinDataLength() (5)

//! return the maximum encoded length for the Cortex_TelemetryBattery packet
#define getCortex_TelemetryBatteryMaxDataLength() (5)

/*!
 * Output rail status information
 */
typedef struct
{
    float avionicsVoltage; //!< Avionics rail voltage
    float avionicsCurrent; //!< Avionics rail current
    float payloadVoltage;  //!< Payload rail voltage
    float payloadCurrent;  //!< Payload rail current
    float servoVoltage;    //!< Servo rail voltage
    float servoCurrent;    //!< Servo rail current
}Cortex_TelemetryOutputRail_t;

//! Create the Cortex_TelemetryOutputRail packet
void encodeCortex_TelemetryOutputRailPacketStructure(void* pkt, const Cortex_TelemetryOutputRail_t* user);

//! Decode the Cortex_TelemetryOutputRail packet
int decodeCortex_TelemetryOutputRailPacketStructure(const void* pkt, Cortex_TelemetryOutputRail_t* user);

//! Create the Cortex_TelemetryOutputRail packet from parameters
void encodeCortex_TelemetryOutputRailPacket(void* pkt, float avionicsVoltage, float avionicsCurrent, float payloadVoltage, float payloadCurrent, float servoVoltage, float servoCurrent);

//! Decode the Cortex_TelemetryOutputRail packet to parameters
int decodeCortex_TelemetryOutputRailPacket(const void* pkt, float* avionicsVoltage, float* avionicsCurrent, float* payloadVoltage, float* payloadCurrent, float* servoVoltage, float* servoCurrent);

//! return the packet ID for the Cortex_TelemetryOutputRail packet
#define getCortex_TelemetryOutputRailPacketID() (PKT_CORTEX_TELEMETRY_OUTPUT_RAIL)

//! return the minimum encoded length for the Cortex_TelemetryOutputRail packet
#define getCortex_TelemetryOutputRailMinDataLength() (8)

//! return the maximum encoded length for the Cortex_TelemetryOutputRail packet
#define getCortex_TelemetryOutputRailMaxDataLength() (8)

/*!
 * Telemetry settings
 */
typedef struct
{
    Cortex_TelemetryPackets_t packets; //!< Telemetry packet selection
}Cortex_TelemetrySettings_t;

//! Create the Cortex_TelemetrySettings packet
void encodeCortex_TelemetrySettingsPacketStructure(void* pkt, const Cortex_TelemetrySettings_t* user);

//! Decode the Cortex_TelemetrySettings packet
int decodeCortex_TelemetrySettingsPacketStructure(const void* pkt, Cortex_TelemetrySettings_t* user);

//! return the packet ID for the Cortex_TelemetrySettings packet
#define getCortex_TelemetrySettingsPacketID() (PKT_CORTEX_CONFIG_TELEMETRY)

//! return the minimum encoded length for the Cortex_TelemetrySettings packet
#define getCortex_TelemetrySettingsMinDataLength() (1)

//! return the maximum encoded length for the Cortex_TelemetrySettings packet
#define getCortex_TelemetrySettingsMaxDataLength() (1)

/*!
 * Generator settings
 */
typedef struct
{
    uint8_t  powerLossTimeout; //!< Timeout for power loss detection
    uint16_t minRunningRpm;    //!< Minimum engine speed for running.
    float    beltRatio;        //!< Generator drive belt ratio
}Cortex_GeneratorSettings_t;

//! Create the Cortex_GeneratorSettings packet
void encodeCortex_GeneratorSettingsPacketStructure(void* pkt, const Cortex_GeneratorSettings_t* user);

//! Decode the Cortex_GeneratorSettings packet
int decodeCortex_GeneratorSettingsPacketStructure(const void* pkt, Cortex_GeneratorSettings_t* user);

//! return the packet ID for the Cortex_GeneratorSettings packet
#define getCortex_GeneratorSettingsPacketID() (PKT_CORTEX_CONFIG_GENERATOR)

//! return the minimum encoded length for the Cortex_GeneratorSettings packet
#define getCortex_GeneratorSettingsMinDataLength() (5)

//! return the maximum encoded length for the Cortex_GeneratorSettings packet
#define getCortex_GeneratorSettingsMaxDataLength() (5)

/*!
 * System starting settings
 */
typedef struct
{
    uint8_t compressionTime;       //!< Engine pre-compression duration
    uint8_t compressionDuty;       //!< Motor pre-compression duty cycle
    bool    disableManualCranking; //!< Set this bit to disable manual engine cranking
    uint8_t reservedBits;          //!< Reserved bits. Field is encoded constant.
}Cortex_StartingSettings_t;

//! Create the Cortex_StartingSettings packet
void encodeCortex_StartingSettingsPacketStructure(void* pkt, const Cortex_StartingSettings_t* user);

//! Decode the Cortex_StartingSettings packet
int decodeCortex_StartingSettingsPacketStructure(const void* pkt, Cortex_StartingSettings_t* user);

//! return the packet ID for the Cortex_StartingSettings packet
#define getCortex_StartingSettingsPacketID() (PKT_CORTEX_CONFIG_STARTING)

//! return the minimum encoded length for the Cortex_StartingSettings packet
#define getCortex_StartingSettingsMinDataLength() (2)

//! return the maximum encoded length for the Cortex_StartingSettings packet
#define getCortex_StartingSettingsMaxDataLength() (3)

/*!
 * System power limit settings
 */
typedef struct
{
    bool    enableTempLimit;       //!< Enable over-temperature power limit
    bool    enableCurrentLimit;    //!< Enable motor current power limit
    bool    enablePowerLimit;      //!< Enable power map power limit
    float   generatorCurrentLimit; //!< Generator winding current limit
    uint8_t generatorTempLimit;    //!< Generator temperature limit value
    float   filter;                //!< Power limit filter frequency
    float   Kp;                    //!< Power limit controller proportional gain
    float   Ki;                    //!< Power limit controller integral gain
}Cortex_PowerLimitSettings_t;

//! Create the Cortex_PowerLimitSettings packet
void encodeCortex_PowerLimitSettingsPacketStructure(void* pkt, const Cortex_PowerLimitSettings_t* user);

//! Decode the Cortex_PowerLimitSettings packet
int decodeCortex_PowerLimitSettingsPacketStructure(const void* pkt, Cortex_PowerLimitSettings_t* user);

//! return the packet ID for the Cortex_PowerLimitSettings packet
#define getCortex_PowerLimitSettingsPacketID() (PKT_CORTEX_CONFIG_POWER_LIMIT)

//! return the minimum encoded length for the Cortex_PowerLimitSettings packet
#define getCortex_PowerLimitSettingsMinDataLength() (9)

//! return the maximum encoded length for the Cortex_PowerLimitSettings packet
#define getCortex_PowerLimitSettingsMaxDataLength() (9)

/*!
 * Engine power map settings
 */
typedef struct
{
    float rpm[5];   //!< Engine RPM values for power map.
    float power[5]; //!< Engine power values for power map
}Cortex_PowerMap_t;

//! Create the Cortex_PowerMap packet
void encodeCortex_PowerMapPacketStructure(void* pkt, const Cortex_PowerMap_t* user);

//! Decode the Cortex_PowerMap packet
int decodeCortex_PowerMapPacketStructure(const void* pkt, Cortex_PowerMap_t* user);

//! return the packet ID for the Cortex_PowerMap packet
#define getCortex_PowerMapPacketID() (PKT_CORTEX_CONFIG_POWER_MAP)

//! return the minimum encoded length for the Cortex_PowerMap packet
#define getCortex_PowerMapMinDataLength() (10)

//! return the maximum encoded length for the Cortex_PowerMap packet
#define getCortex_PowerMapMaxDataLength() (10)

/*!
 * Battery settings
 */
typedef struct
{
    uint16_t minChargingRpm; //!< Minimum engine speed required for battery charging
}Cortex_BatterySettings_t;

//! Create the Cortex_BatterySettings packet
void encodeCortex_BatterySettingsPacketStructure(void* pkt, const Cortex_BatterySettings_t* user);

//! Decode the Cortex_BatterySettings packet
int decodeCortex_BatterySettingsPacketStructure(const void* pkt, Cortex_BatterySettings_t* user);

//! return the packet ID for the Cortex_BatterySettings packet
#define getCortex_BatterySettingsPacketID() (PKT_CORTEX_CONFIG_BATTERY)

//! return the minimum encoded length for the Cortex_BatterySettings packet
#define getCortex_BatterySettingsMinDataLength() (4)

//! return the maximum encoded length for the Cortex_BatterySettings packet
#define getCortex_BatterySettingsMaxDataLength() (4)

/*!
 * Output rail settings
 */
typedef struct
{
    Cortex_OutputRailSettings_t AvionicsRail;   //!< Settings for avionics output rail
    Cortex_OutputRailSettings_t PayloadRail;    //!< Settings for payload output rail
    Cortex_OutputRailSettings_t ServoRail;      //!< Settings for servo output rail
    Cortex_OutputRailSettings_t BatteryCharger; //!< Settings for battery charger output rail
}Cortex_RailSettings_t;

//! Create the Cortex_RailSettings packet
void encodeCortex_RailSettingsPacketStructure(void* pkt, const Cortex_RailSettings_t* user);

//! Decode the Cortex_RailSettings packet
int decodeCortex_RailSettingsPacketStructure(const void* pkt, Cortex_RailSettings_t* user);

//! return the packet ID for the Cortex_RailSettings packet
#define getCortex_RailSettingsPacketID() (PKT_CORTEX_CONFIG_OUTPUT_RAIL)

//! return the minimum encoded length for the Cortex_RailSettings packet
#define getCortex_RailSettingsMinDataLength() (8)

//! return the maximum encoded length for the Cortex_RailSettings packet
#define getCortex_RailSettingsMaxDataLength() (8)

/*!
 * Cortex telltale values
 */
typedef struct
{
    float maxBatteryCurrent;  //!< Maximum recorded battery current. ESC Telltale corresponds to maximum generator current.
    float maxBatteryVoltage;  //!< Maximum recorded battery voltage. ESC Telltale corresponds to maximum generator voltage.
    float maxAvionicsVoltage; //!< Maximum recorded avionics rail voltage
    float maxPayloadVoltage;  //!< Maximum recorded payload rail voltage
    float maxServoVoltage;    //!< Maximum recorded servo rail voltage
    float maxChargeCurrent;   //!< Maximum recorded battery charging current
    float maxAvionicsCurrent; //!< Maximum recorded avionics rail current
    float maxPayloadCurrent;  //!< Maximum recorded payload rail current
    float maxServoCurrent;    //!< Maximum recorded servo rail current
}Cortex_ExtraTelltaleValues_t;

//! Create the Cortex_ExtraTelltaleValues packet
void encodeCortex_ExtraTelltaleValuesPacketStructure(void* pkt, const Cortex_ExtraTelltaleValues_t* user);

//! Decode the Cortex_ExtraTelltaleValues packet
int decodeCortex_ExtraTelltaleValuesPacketStructure(const void* pkt, Cortex_ExtraTelltaleValues_t* user);

//! Create the Cortex_ExtraTelltaleValues packet from parameters
void encodeCortex_ExtraTelltaleValuesPacket(void* pkt, float maxBatteryCurrent, float maxBatteryVoltage, float maxAvionicsVoltage, float maxPayloadVoltage, float maxServoVoltage, float maxChargeCurrent, float maxAvionicsCurrent, float maxPayloadCurrent, float maxServoCurrent);

//! Decode the Cortex_ExtraTelltaleValues packet to parameters
int decodeCortex_ExtraTelltaleValuesPacket(const void* pkt, float* maxBatteryCurrent, float* maxBatteryVoltage, float* maxAvionicsVoltage, float* maxPayloadVoltage, float* maxServoVoltage, float* maxChargeCurrent, float* maxAvionicsCurrent, float* maxPayloadCurrent, float* maxServoCurrent);

//! return the packet ID for the Cortex_ExtraTelltaleValues packet
#define getCortex_ExtraTelltaleValuesPacketID() (PKT_CORTEX_EXTRA_TELLTALES)

//! return the minimum encoded length for the Cortex_ExtraTelltaleValues packet
#define getCortex_ExtraTelltaleValuesMinDataLength() (14)

//! return the maximum encoded length for the Cortex_ExtraTelltaleValues packet
#define getCortex_ExtraTelltaleValuesMaxDataLength() (14)

/*!
 * Example output enable for testing
 */
typedef struct
{
    uint8_t index;  //!< SERVO = 0, BATTERY_CHARGER = 1, PAYLOAD = 2, AVIONICS = 3
    bool    enable; //!< 1 = enabled. 0 = disabled.
}Cortex_EnableRail_t;

//! Create the Cortex_EnableRail packet
void encodeCortex_EnableRailPacketStructure(void* pkt, const Cortex_EnableRail_t* user);

//! Decode the Cortex_EnableRail packet
int decodeCortex_EnableRailPacketStructure(const void* pkt, Cortex_EnableRail_t* user);

//! Create the Cortex_EnableRail packet from parameters
void encodeCortex_EnableRailPacket(void* pkt, uint8_t index, bool enable);

//! Decode the Cortex_EnableRail packet to parameters
int decodeCortex_EnableRailPacket(const void* pkt, uint8_t* index, bool* enable);

//! return the packet ID for the Cortex_EnableRail packet
#define getCortex_EnableRailPacketID() (PKT_CORTEX_CMD_SET_OUTPUT_ENABLE)

//! return the minimum encoded length for the Cortex_EnableRail packet
#define getCortex_EnableRailMinDataLength() (1)

//! return the maximum encoded length for the Cortex_EnableRail packet
#define getCortex_EnableRailMaxDataLength() (1)

/*!
 * Enter calibration mode
 */
typedef struct
{
    uint32_t serialNumber; //!< Serial number of the device
}Cortex_EnterCalibrationMode_t;

//! Create the Cortex_EnterCalibrationMode packet from parameters
void encodeCortex_EnterCalibrationModePacket(void* pkt, uint32_t serialNumber);

//! Decode the Cortex_EnterCalibrationMode packet to parameters
int decodeCortex_EnterCalibrationModePacket(const void* pkt, uint32_t* serialNumber);

//! return the packet ID for the Cortex_EnterCalibrationMode packet
#define getCortex_EnterCalibrationModePacketID() (PKT_CORTEX_CMD_SET_CALIBRATION_MODE)

//! return the minimum encoded length for the Cortex_EnterCalibrationMode packet
#define getCortex_EnterCalibrationModeMinDataLength() (6)

//! return the maximum encoded length for the Cortex_EnterCalibrationMode packet
#define getCortex_EnterCalibrationModeMaxDataLength() (6)

#ifdef __cplusplus
}
#endif
#endif // _CORTEXPACKETS_H
