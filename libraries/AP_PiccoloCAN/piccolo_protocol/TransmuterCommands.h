// TransmuterCommands.h was generated by ProtoGen version 3.5.c

/*
 * This file is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Author: Oliver Walters / Currawong Engineering Pty Ltd
 */

#ifndef _TRANSMUTERCOMMANDS_H
#define _TRANSMUTERCOMMANDS_H

// Language target is C, C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * \file
 */

#include <stdint.h>
#include <stdbool.h>
#include "TransmuterProtocol.h"

/*!
 * Enumeration of available system commands
 */
typedef enum
{
    CMD_TRANSMUTER_SET_CURRENT_TARGET_AUTO = 0xC0, //!< Set the current target to auto
    CMD_TRANSMUTER_SET_CURRENT_TARGET_MANUAL,      //!< Set the current target manual value
    CMD_TRANSMUTER_SET_RPM_TARGET_AUTO = 0xD0,     //!< Set the RPM target to auto
    CMD_TRANSMUTER_SET_RPM_TARGET_MANUAL,          //!< Set the RPM target to a manual value
    CMD_TRANSMUTER_REQUEST_HF_DATA = 0xE0          //!< Request high-frequency transmuter specific telemetry data
} TransmuterSystemCommands;

//! \return the label of a 'TransmuterSystemCommands' enum entry, based on its value
const char* TransmuterSystemCommands_EnumLabel(int value);

//! Create the Transmuter_SetCurrentTargetAuto packet from parameters
void encodeTransmuter_SetCurrentTargetAutoPacket(void* pkt);

//! Decode the Transmuter_SetCurrentTargetAuto packet to parameters
int decodeTransmuter_SetCurrentTargetAutoPacket(const void* pkt);

//! return the packet ID for the Transmuter_SetCurrentTargetAuto packet
#define getTransmuter_SetCurrentTargetAutoPacketID() (PKT_TRANSMUTER_SYSTEM_CMD)

//! return the minimum encoded length for the Transmuter_SetCurrentTargetAuto packet
#define getTransmuter_SetCurrentTargetAutoMinDataLength() (1)

//! return the maximum encoded length for the Transmuter_SetCurrentTargetAuto packet
#define getTransmuter_SetCurrentTargetAutoMaxDataLength() (1)

/*!
 * Set current target to auto mode
 */
typedef struct
{
    float current;
}Transmuter_SetCurrentTargetManual_t;

//! Create the Transmuter_SetCurrentTargetManual packet from parameters
void encodeTransmuter_SetCurrentTargetManualPacket(void* pkt, float current);

//! Decode the Transmuter_SetCurrentTargetManual packet to parameters
int decodeTransmuter_SetCurrentTargetManualPacket(const void* pkt, float* current);

//! return the packet ID for the Transmuter_SetCurrentTargetManual packet
#define getTransmuter_SetCurrentTargetManualPacketID() (PKT_TRANSMUTER_SYSTEM_CMD)

//! return the minimum encoded length for the Transmuter_SetCurrentTargetManual packet
#define getTransmuter_SetCurrentTargetManualMinDataLength() (3)

//! return the maximum encoded length for the Transmuter_SetCurrentTargetManual packet
#define getTransmuter_SetCurrentTargetManualMaxDataLength() (3)

//! Create the Transmuter_SetRpmTargetAuto packet from parameters
void encodeTransmuter_SetRpmTargetAutoPacket(void* pkt);

//! Decode the Transmuter_SetRpmTargetAuto packet to parameters
int decodeTransmuter_SetRpmTargetAutoPacket(const void* pkt);

//! return the packet ID for the Transmuter_SetRpmTargetAuto packet
#define getTransmuter_SetRpmTargetAutoPacketID() (PKT_TRANSMUTER_SYSTEM_CMD)

//! return the minimum encoded length for the Transmuter_SetRpmTargetAuto packet
#define getTransmuter_SetRpmTargetAutoMinDataLength() (1)

//! return the maximum encoded length for the Transmuter_SetRpmTargetAuto packet
#define getTransmuter_SetRpmTargetAutoMaxDataLength() (1)

/*!
 * Set RPM target to auto mode
 */
typedef struct
{
    uint16_t rpm; //!< Manual RPM command
}Transmuter_SetRpmTargetManual_t;

//! Create the Transmuter_SetRpmTargetManual packet from parameters
void encodeTransmuter_SetRpmTargetManualPacket(void* pkt, uint16_t rpm);

//! Decode the Transmuter_SetRpmTargetManual packet to parameters
int decodeTransmuter_SetRpmTargetManualPacket(const void* pkt, uint16_t* rpm);

//! return the packet ID for the Transmuter_SetRpmTargetManual packet
#define getTransmuter_SetRpmTargetManualPacketID() (PKT_TRANSMUTER_SYSTEM_CMD)

//! return the minimum encoded length for the Transmuter_SetRpmTargetManual packet
#define getTransmuter_SetRpmTargetManualMinDataLength() (3)

//! return the maximum encoded length for the Transmuter_SetRpmTargetManual packet
#define getTransmuter_SetRpmTargetManualMaxDataLength() (3)

#ifdef __cplusplus
}
#endif
#endif // _TRANSMUTERCOMMANDS_H
