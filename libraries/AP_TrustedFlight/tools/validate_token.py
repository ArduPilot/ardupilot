#!/usr/bin/env python3
'''
script to validate JWT token generated by generate_key_and_token.py 
'''

import os
import sys
import json
import monocypher
from datetime import datetime, timezone

from utils.constants import PUBLIC_KEY_FILE, TOKEN_FILE, TOKEN_ISSUER, JWT_TYPE, JWT_ALG
from utils.helpers import base64url_decode


def _validate_typ(header, typ):
    if not isinstance(header.get('typ'), str):
        return False
    return header['typ'] == typ

def _validate_alg(header, alg):
    if not isinstance(header.get('alg'), str):
        return False
    return header['alg'] == alg

def _validate_iss(payload, issuer):
    if not isinstance(payload.get('iss'), str):
        return False
    return payload['iss'] == issuer

def _validate_iat(payload, now):
    if not isinstance(payload.get('iat'), int):
        return False
    return now > payload['iat']

def _validate_exp(payload, now):
    if not isinstance(payload.get('exp'), int):
        return False
    return now < payload['exp']

def _validate_nbf(payload, now):
    if 'nbf' not in payload.keys():
        return True
    if not isinstance(payload.get('nbf'), int):
        return False
    return now > payload['nbf']


def validate_token(public_key_path, token_path):
    token = open(token_path, 'rb').read()
    verify_input, encoded_sig = token.rsplit(b'.', 1)
    
    key = open(public_key_path, 'rb').read()
    key = base64url_decode(key)
    
    sig = base64url_decode(encoded_sig)
    
    header = json.loads(base64url_decode(verify_input.split(b'.')[0]).decode())
    payload = json.loads(base64url_decode(verify_input.split(b'.')[1]).decode())
    
    now = int(datetime.now(timezone.utc).timestamp())
    if monocypher.signature_check(sig, key, verify_input) \
        and _validate_typ(header, JWT_TYPE) \
        and _validate_alg(header, JWT_ALG) \
        and _validate_iat(payload, now) \
        and _validate_nbf(payload, now) \
        and _validate_exp(payload, now) \
        and _validate_iss(payload, TOKEN_ISSUER):
        print('Token is valid')
    else:
        print('Token is invalid')


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("Usage: validate_token.py <dir_name>")
        sys.exit(1)

    dir_name = sys.argv[1]
    if not os.path.exists(dir_name):
        print(
            f"Directory `{dir_name}` not exists. Please provide valid directory path to find public key and token")
        sys.exit(1)

    validate_token(f'{dir_name}/{PUBLIC_KEY_FILE}', f'{dir_name}/{TOKEN_FILE}')
