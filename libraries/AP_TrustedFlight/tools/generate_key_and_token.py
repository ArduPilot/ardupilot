#!/usr/bin/env python3
'''
script to generate public key and JWT token for Trusted Flight module testing

NOTE:   The key & token generated by this script are for only for demonstration & local testing. 
        These are not intended to be used in production systems.
'''

import os
import sys
import json
import monocypher
from datetime import datetime, timedelta, timezone

from utils.constants import PUBLIC_KEY_FILE, TOKEN_FILE, EXPIRATION_IN_MINS, TOKEN_ISSUER, JWT_TYPE, JWT_ALG
from utils.helpers import base64url_encode


def create_key_pair(public_key_path: str):
    private_key, public_key = monocypher.generate_signing_key_pair()

    with open(public_key_path, 'wb') as f:
        f.write(base64url_encode(public_key))
        print(f'Public key written to file: {f.name}')

    return private_key


def create_token(signing_key: bytes, token_path: str) -> None:
    data = {
        'iss': TOKEN_ISSUER,
        'iat': datetime.now(timezone.utc),
        'exp': datetime.now(timezone.utc) + timedelta(minutes=EXPIRATION_IN_MINS),
        'key1': 'value1',
        'key2': 'value2'
    }

    for time_claim in ['iat', 'exp', 'nbf']:
        if isinstance(data.get(time_claim), datetime):
            data[time_claim] = int(data[time_claim].timestamp())

    json_payload = json.dumps(
        data, separators=(",", ":"), cls=json.JSONEncoder
    ).encode()

    header = {"typ": JWT_TYPE, "alg": JWT_ALG}
    json_header = json.dumps(
        header, separators=(",", ":"), cls=json.JSONEncoder
    ).encode()

    segments = []
    segments.append(base64url_encode(json_header))
    segments.append(base64url_encode(json_payload))

    # Segments
    signing_input = b".".join(segments)
    sig = monocypher.signature_sign(signing_key, signing_input)

    segments.append(base64url_encode(sig))

    encoded_token = b".".join(segments)

    with open(token_path, 'wb') as f:
        f.write(encoded_token)
        print(f'Token written to file: {f.name}')


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("Usage: generate_key_and_token.py <dir_name>")
        sys.exit(1)

    dir_name = sys.argv[1]
    os.makedirs(f'{dir_name}', exist_ok=True)

    signing_key = create_key_pair(f'{dir_name}/{PUBLIC_KEY_FILE}')
    create_token(signing_key, f'{dir_name}/{TOKEN_FILE}')
