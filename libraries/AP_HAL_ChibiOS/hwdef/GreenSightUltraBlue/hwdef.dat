# HW definition file for processing by chibios_hwdef.py for UltraBlue

# MCU class and specific type
MCU STM32H7xx STM32H743xx

# Setup USB
USB_STRING_MANUFACTURER "GreenSight"
USB_STRING_PRODUCT "UltraBlue"

# Crystal frequency
OSCILLATOR_HZ 16000000

# Board ID for firmware load
APJ_BOARD_ID AP_HW_GreenSight_UltraBlue

# With 2M flash we can afford to optimize for speed
FLASH_SIZE_KB 2048
env OPTIMIZE -O2

# This is the STM32 timer that ChibiOS will use for the low level
# driver. This must be a 32 bit timer. We currently only support
# timers 2, 3, 4, 5 and 21. See hal_st_lld.c in ChibiOS for details.
STM32_ST_USE_TIMER 2

# Where the firmware will start in flash
# Note that the bootloader takes first sector (128k)
FLASH_RESERVE_START_KB 128

# The UltraBlue usage of this ordering is:
# 1) SERIAL0: console = USB
# 2) SERIAL1: Jetson telem
# 3) SERIAL2: telem2
# 4) SERIAL3: primary GPS
# 5) SERIAL4: GPS2
# 6) SERIAL5: USER/(RCin: DSM/PPM/SBus)
# 7) SERIAL6: ESC telemetry
# 8) SERIAL7: USER/(debug tx/rx)
# 9) SERIAL8: Second USB serial endpoint
SERIAL_ORDER OTG1 USART2 USART6 USART1 UART4 UART8 USART3 UART7 OTG2

# Define the pins that USB is connected on
PA11 OTG_FS_DM OTG1
PA12 OTG_FS_DP OTG1

# Pins for SWD debugging with a STlinkv2 or black-magic probe
PA13 JTMS-SWDIO SWD
PA14 JTCK-SWCLK SWD

# SPI1 - internal sensors (IMU)
PG11 SPI1_SCK SPI1
PA6 SPI1_MISO SPI1
PD7 SPI1_MOSI SPI1

# SPI2 - FRAM
PI1 SPI2_SCK SPI2
PI2 SPI2_MISO SPI2
PI3 SPI2_MOSI SPI2

# SPI4 - internal sensors 2 (IMU)
PE2 SPI4_SCK SPI4
PE13 SPI4_MISO SPI4
PE6 SPI4_MOSI SPI4

# SPI5 - external
PF7 SPI5_SCK SPI5
PF8 SPI5_MISO SPI5
PF9 SPI5_MOSI SPI5

# SPI6 - internal sensors 3 (IMU, baro)
PG13 SPI6_SCK SPI6
PG12 SPI6_MISO SPI6
PA7 SPI6_MOSI SPI6

# Note that CS pins are software controlled, and are
# not tied to a particular SPI bus.
# Some CS pins for sensors. The labels for all CS pins need to
# match the SPI device table later in this file.
PF10 BMI088_U11_A_CS CS
PG6  BMI088_U11_G_CS CS
PI12 ICM20649_CS CS SPEED_VERYLOW
PF3  BMI088_U12_A_CS CS
PF4  BMI088_U12_G_CS CS
PF5  FRAM_CS CS SPEED_VERYLOW
PI8  DPS310_CS CS

# External CS pins, SPI5 connector
PI4  EXT1_CS1 CS
PI10 EXT1_CS2 CS
PI13 EXT1_CS3 CS

# I2C1 is on GPS1 connector
PB8 I2C1_SCL I2C1
PB9 I2C1_SDA I2C1

# I2C2 on GPS2 connector
PF1 I2C2_SCL I2C2
PF0 I2C2_SDA I2C2

# I2C3 for internal mag and BMS
PH7 I2C3_SCL I2C3
PH8 I2C3_SDA I2C3

# I2C4 is on API2C4 connector
PF14 I2C4_SCL I2C4
PF15 I2C4_SDA I2C4

# I2C bus order
I2C_ORDER I2C1 I2C3 I2C2 I2C4

# Mark the second I2C bus (I2C3) as internal
define HAL_I2C_INTERNAL_MASK 2

# This is the pin to enable the sensors rail. It can be used to power
# cycle sensors to recover them in case there are problems with power on
# timing affecting sensor stability.
PE3 VDD_3V3_SENSORS_EN OUTPUT LOW

# DSM requires its own power rail
# as binding requires us to power cycle it
PA9 VDD_3V3_DSM_EN OUTPUT HIGH GPIO(72)

# start peripheral power on
PJ5 nVDD_5V_PERIPH_EN OUTPUT LOW

# SD card enable pin
PG7 VDD_3V3_SD_CARD_EN OUTPUT HIGH

# Data ReaDY pin
PH5  DRDY2_ICM20649 INPUT

# USART3 is ESC telemetry
PD8 USART3_TX USART3
PD9 USART3_RX USART3

# USART2 is Jetson telem
PD6 USART2_RX USART2
PD5 USART2_TX USART2
PD3 USART2_CTS USART2
PD4 USART2_RTS USART2

# USART1 is GPS1
PB7 USART1_RX USART1 NODMA
PB6 USART1_TX USART1 NODMA

# UART4 GPS2
PD0 UART4_RX UART4 NODMA
PD1 UART4_TX UART4 NODMA

# UART8 TX is SBUS/PPM/DSM port
# We set to a GPIO to use when DSM binding
PE0 UART8_RX UART8
PE1 UART8_TX UART8 GPIO(73)

# USART6 is telem2
PG9 USART6_RX USART6
PG14 USART6_TX USART6
PG15 USART6_CTS USART6
PG8 USART6_RTS USART6

# UART7 is debug
PF6 UART7_RX UART7 NODMA
PE8 UART7_TX UART7 NODMA

# Default SERIAL6 interface to ESC telemetry as it
# is pinned out on the mezzanine connector and
# designed to only really be for ESC telemetry
define DEFAULT_SERIAL6_PROTOCOL SerialProtocol_ESCTelemetry

# PWM AUX channels
# NOTE: PWM outputs on the same channel must all have
# the same output protocol (DShot, PWM, etc)
PH10 TIM5_CH1 TIM5 PWM(1) GPIO(50) BIDIR
PH11 TIM5_CH2 TIM5 PWM(2) GPIO(51)
PH12 TIM5_CH3 TIM5 PWM(3) GPIO(52) BIDIR
PI0  TIM5_CH4 TIM5 PWM(4) GPIO(53)
PD12 TIM4_CH1 TIM4 PWM(5) GPIO(54) BIDIR
PD13 TIM4_CH2 TIM4 PWM(6) GPIO(55)
PD14 TIM4_CH3 TIM4 PWM(7) GPIO(56) BIDIR
PD15 TIM4_CH4 TIM4 PWM(8) GPIO(57)

PE9  TIM1_CH1  TIM1  PWM(9)  GPIO(58)
PE11 TIM1_CH2  TIM1  PWM(10) GPIO(59)
PA10 TIM1_CH3  TIM1  PWM(11) GPIO(60)
PE14 TIM1_CH4  TIM1  PWM(12) GPIO(61)
PH6  TIM12_CH1 TIM12 PWM(13) GPIO(62) NODMA
PH9  TIM12_CH2 TIM12 PWM(14) GPIO(63) NODMA

# Camera trigger and return pins respectively
PJ6 TIM8_CH2   TIM8  PWM(15) GPIO(64)
PJ7 TIM8_CH2N  TIM8  PWM(16) GPIO(65)

define RELAY1_PIN_DEFAULT 64
define RELAY2_PIN_DEFAULT 65

# PWM output for buzzer
PE5 TIM15_CH1 TIM15 GPIO(77) ALARM

# To be able to bind Spektrum DSM satellite receivers
# we need to provide the legacy code with the pins to use
define HAL_SPEKTRUM_PWR_ENABLED 1
define HAL_GPIO_SPEKTRUM_PWR 72
define HAL_GPIO_SPEKTRUM_RC 73

# RC input
PB4 TIM3_CH1 TIM3 RCININT PULLUP LOW

# Battery voltage/current sense analog in pins
# We also need to define a battery voltage scale to use by default
PA0 BATT_VOLTAGE_SENS ADC1 SCALE(1)
PA1 BATT_CURRENT_SENS ADC1 SCALE(1)
define HAL_BATT_VOLT_PIN 16
define HAL_BATT_CURR_PIN 17
define HAL_BATT_VOLT_SCALE 18.0
define HAL_BATT_CURR_SCALE 24.0

# ADC6.6
PA4 SPARE2_ADC1 ADC1 SCALE(2)

# VDD sense pin. This is used to sense primary board voltage.
PC5 VDD_5V_SENS ADC1 SCALE(2)
PC1 SCALED_V3V3 ADC1 SCALE(2)

# CAN bus
PI9  CAN1_RX CAN1
PH13 CAN1_TX CAN1

# 2nd CAN bus.
PB12 CAN2_RX CAN2
PB13 CAN2_TX CAN2

# Control for silent (no output) for CAN
PH2 GPIO_CAN1_SILENT OUTPUT PUSHPULL SPEED_LOW LOW GPIO(70)
PH3 GPIO_CAN2_SILENT OUTPUT PUSHPULL SPEED_LOW LOW GPIO(71)

# Heaters
PA8 HEATER_EN OUTPUT LOW GPIO(80)
define HAL_HEATER_GPIO_PIN 80
define HAL_HAVE_IMU_HEATER 1

# Power flag pins: these tell the MCU the status of the various power
# supplies that are available. The pin names need to exactly match the
# names used in AnalogIn.cpp.
PG1  VDD_BRICK_VALID INPUT PULLUP
PG2  VDD_BRICK2_VALID INPUT PULLUP

# Pin to detect that power is valid on USB.
PG0  nVBUS INPUT PULLUP

PJ3  VDD_5V_PERIPH_OC INPUT PULLUP
PJ4  VDD_5V_HIPOWER_OC INPUT PULLUP

# Now the SPI device table. This table creates all accessible SPI
# devices, giving the name of the device (which is used by device
# drivers to open the device), plus which SPI bus it it on, what
# device ID will be used (which controls the IDs used in parameters
# such as COMPASS_DEV_ID, so we can detect when the list of devices
# changes between reboots for calibration purposes), the SPI mode to
# use, and the low and high speed settings for the device.

# You can define more SPI devices than you actually have, to allow for
# flexibility in board setup, and the driver code can probe to see
# which are responding.

# The DEVID values and device names are chosen to match the PX4 port
# of ArduPilot so users don't need to re-do their accel and compass
# calibrations when moving to ChibiOS.

# SPI devices
SPIDEV bmi088_u12_a   SPI4 DEVID2  BMI088_U12_A_CS     MODE3  10*MHZ 10*MHZ
SPIDEV bmi088_u12_g   SPI4 DEVID3  BMI088_U12_G_CS     MODE3  10*MHZ 10*MHZ
SPIDEV bmi088_u11_a   SPI1 DEVID2  BMI088_U11_A_CS     MODE3  10*MHZ 10*MHZ
SPIDEV bmi088_u11_g   SPI1 DEVID3  BMI088_U11_G_CS     MODE3  10*MHZ 10*MHZ
SPIDEV dps310         SPI6 DEVID3  DPS310_CS           MODE3  5*MHZ  5*MHZ
SPIDEV icm20649       SPI6 DEVID2  ICM20649_CS         MODE3  2*MHZ  8*MHZ
SPIDEV ramtron        SPI2 DEVID1  FRAM_CS             MODE3  8*MHZ  8*MHZ

# One barometer
BARO DPS310 SPI:dps310

# Three IMUs
IMU BMI088 SPI:bmi088_u12_a SPI:bmi088_u12_g ROTATION_NONE
IMU BMI088 SPI:bmi088_u11_a SPI:bmi088_u11_g ROTATION_NONE
IMU Invensensev2 SPI:icm20649 ROTATION_ROLL_180_YAW_90

define HAL_DEFAULT_INS_FAST_SAMPLE 5

# Rev 4 UltraBlue uses the IST308. Rev 5/6 uses the IST8310.
# Compass
# format is COMPASS <driver> <I2C/SPI>:<bus>:<address> <force_external> <rotation>

COMPASS IST8308 I2C:1:0x0E false ROTATION_ROLL_180_YAW_90
define AP_COMPASS_IST8308_DEFAULT_ROTATION ROTATION_ROLL_180_YAW_90

COMPASS IST8310 I2C:1:0x0E false ROTATION_ROLL_180
define AP_COMPASS_IST8310_DEFAULT_ROTATION ROTATION_ROLL_180

define HAL_PROBE_EXTERNAL_I2C_COMPASSES

# microSD support
PC8 SDMMC1_D0 SDMMC1
PC9 SDMMC1_D1 SDMMC1
PC10 SDMMC1_D2 SDMMC1
PC11 SDMMC1_D3 SDMMC1
PC12 SDMMC1_CK SDMMC1
PD2 SDMMC1_CMD SDMMC1

# Use pixracer style 3-LED indicators
define AP_NOTIFY_GPIO_LED_RGB_ENABLED 1

# Red LED marked as B/E (In Bootloader / Error)
PI5 LED_R1 OUTPUT OPENDRAIN HIGH GPIO(0)
PI6 LED_G1 OUTPUT OPENDRAIN LOW  GPIO(1)
PI7 LED_B1 OUTPUT OPENDRAIN HIGH GPIO(2)

define AP_NOTIFY_GPIO_LED_RGB_RED_PIN 0
define AP_NOTIFY_GPIO_LED_RGB_GREEN_PIN 1
define AP_NOTIFY_GPIO_LED_RGB_BLUE_PIN 2

# Enable RAMTROM FRAM for parameter storage
define HAL_STORAGE_SIZE 16384
define HAL_WITH_RAMTRON 1

# Allow to have have a dedicated safety switch pin
define HAL_HAVE_SAFETY_SWITCH 1
PE12 LED_SAFETY OUTPUT
PE10 SAFETY_IN INPUT PULLDOWN

# Enable FAT filesystem support (needs a microSD defined via SDMMC)
define HAL_OS_FATFS_IO 1

# Configure DMA preferences
DMA_PRIORITY ADC* SPI1* TIM*UP*
DMA_NOSHARE  SPI1* TIM*UP*

# Enable DFU reboot for updating the bootloader
# Note that if firmware is build with --secure-bl
# then DFU is disabled
ENABLE_DFU_BOOT 1

# build ABIN for flash-from-bootloader support:
env BUILD_ABIN True
