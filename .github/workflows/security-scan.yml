name: Security Scanning

on:
  push:
    branches: [ master, Copter-*, Plane-*, Rover-*, Sub-*, Tracker-* ]
  pull_request:
    branches: [ master ]
  schedule:
    # Run weekly security scans every Monday at 00:00 UTC
    - cron: '0 0 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: security-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # CodeQL Analysis for C/C++ and Python
  codeql-analysis:
    name: CodeQL SAST Analysis
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp', 'python' ]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality
          config: |
            paths-ignore:
              - modules/
              - build/

      - name: Setup build environment for C++
        if: matrix.language == 'cpp'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc-arm-none-eabi

      - name: Build for CodeQL (C++)
        if: matrix.language == 'cpp'
        run: |
          ./waf configure --board sitl
          ./waf build --target bin/arducopter || true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          upload: true

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: 'recursive'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-fs'

      - name: Scan Python dependencies with Safety
        run: |
          pip install safety
          pip freeze > requirements-frozen.txt
          safety check --file requirements-frozen.txt --output json > safety-results.json || true
        continue-on-error: true

      - name: Upload Safety results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-scan-results
          path: safety-results.json
          retention-days: 30

  # Docker container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Build Docker image
        run: |
          docker build -t ardupilot-dev:security-scan .

      - name: Run Trivy container scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ardupilot-dev:security-scan'
          format: 'sarif'
          output: 'trivy-container-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'
          category: 'trivy-container'

  # Static Application Security Testing with Semgrep
  semgrep-sast:
    name: Semgrep SAST
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/cpp
            p/python
          generateSarif: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: 'semgrep'

  # Secret scanning with Gitleaks
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # License compliance check
  license-scan:
    name: License Compliance
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: 'recursive'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install license checker
        run: |
          pip install pip-licenses licensecheck

      - name: Check Python licenses
        run: |
          pip-licenses --format=json --output-file=python-licenses.json || true
        continue-on-error: true

      - name: Upload license scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-scan-results
          path: python-licenses.json
          retention-days: 30

  # Security summary report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-22.04
    needs: [codeql-analysis, dependency-scan, container-scan, semgrep-sast, secret-scan, license-scan]
    if: always()
    
    steps:
      - name: Generate security summary
        run: |
          echo "## ðŸ”’ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Security scans completed for commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Results:" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Dependency Scan: ${{ needs.dependency-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Container Scan: ${{ needs.container-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Semgrep SAST: ${{ needs.semgrep-sast.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Secret Detection: ${{ needs.secret-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… License Compliance: ${{ needs.license-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed results in the Security tab." >> $GITHUB_STEP_SUMMARY
