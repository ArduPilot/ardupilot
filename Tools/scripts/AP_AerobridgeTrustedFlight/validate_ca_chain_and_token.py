#!/usr/bin/env python3
'''
script to validate certificate chain and JWT token generated by generate_root_cert.py & generate_ca_chain_and_token.py 
'''

import sys
import jwt

from utils.constants import ROOT_CA_DIR, TOKEN_FILE, CA_CHAIN_FILE
from utils.helpers import get_ca_chain_from_file, get_certificate_from_file, validate_certificate

def validate_token(trusted_root_path, untrusted_ca_chain_path, token_path):
    chain = get_ca_chain_from_file(untrusted_ca_chain_path)
    
    root_cert = get_certificate_from_file(trusted_root_path)
    chain.append(root_cert)

    # validate self signed root certificate
    validate_certificate(root_cert, root_cert)
    
    # validate ca chain
    validation_pairs = zip(chain[::-1], chain[-2::-1])
    for (cert_to_verify, trusted_cert) in validation_pairs:
        validate_certificate(cert_to_verify, trusted_cert)

    print('Certificate chain is valid.')
    # validate token
    token_to_verify = open(token_path, 'rb').read()
    data = jwt.decode(
        token_to_verify,
        chain[0].public_key(),
        algorithms=["RS256"],
    )
    
    from pprint import pprint
    print('Token is valid.')
    pprint(data)


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("Usage: validate_and_ca_chain_and_token.py <dir_name>")
        sys.exit(1)

    dir_name = sys.argv[1]
    validate_token(f'{dir_name}/{ROOT_CA_DIR}/certificate.crt', f'{dir_name}/{CA_CHAIN_FILE}', f'{dir_name}/{TOKEN_FILE}')
